import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from itertools import combinations
import time
import sys
import os
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from top_n_optimizer import run_top_n_ga_optimization, run_top_n_lp_optimization
from genetic_optimizer import run_optimization, plot_progress, get_top_solutions, compute_total_ru, save_experiment_to_session
from lp import optimize_qs_pulp

plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

st.set_page_config(
    page_title="QS Ranking Optimizer", 
    page_icon="üéØ", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

st.title("üéØ QS Ranking Optimizer")
st.markdown("**–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ä–µ–π—Ç–∏–Ω–≥—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≥–µ–Ω–µ—Ç–∏—á–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤**")
st.markdown("üìÖ **–¶—ñ–ª—å:** –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è QS —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞ 2026 —Ä—ñ–∫ –≤ –º–µ–∂–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É")

print("üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
print(f"üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó: {list(st.session_state.keys())}")


required_keys = ["QS_INPUT", "QS_WEIGHTS", "QS_MAX", "QS_DELTA", "QS_COST", "MAX_RU"]

if not all(k in st.session_state for k in required_keys):
    st.error("‚ùå **–î–∞–Ω—ñ —â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ñ!**")
    st.markdown("""
    **–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É:**
    1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É **"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"** (—É –º–µ–Ω—é –∑–ª—ñ–≤–∞)
    2. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, –≤–∞–≥–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è
    3. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    """)
    st.stop()
    
QS_INPUT = st.session_state["QS_INPUT"]
QS_WEIGHTS = st.session_state["QS_WEIGHTS"]
QS_MAX = st.session_state["QS_MAX"]
QS_DELTA = st.session_state["QS_DELTA"]
QS_COST = st.session_state["QS_COST"]
MAX_RU = st.session_state["MAX_RU"]

st.markdown("---")
st.subheader("üìã –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–ë—é–¥–∂–µ—Ç RU", f"{MAX_RU:,}")
with col2:
    eligible_count = sum(1 for k in QS_INPUT.keys() if float(QS_DELTA.get(k, 0.0)) > 0 and float(QS_COST.get(k, 0.0)) != float("inf"))
    st.metric("–ü—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", eligible_count)
with col3:
    current_qs = sum(float(QS_INPUT[k]) * float(QS_WEIGHTS[k]) for k in QS_INPUT.keys())
    st.metric("–ü–æ—Ç–æ—á–Ω–∏–π QS Score", f"{current_qs:.2f}")

st.markdown("---")

tab1, tab2, tab3, tab4 = st.tabs([
    "üìä –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", 
    "üéØ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", 
    "üèÜ –¢–æ–ø 3-5 –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤",
    "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤"
])

with tab1:
    st.subheader("üìä –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
    st.markdown("**–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –û–ø—Ç–∏–º—ñ–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π QS Score –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É.")
    st.markdown("**‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ç–∏—á–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        auto_find_params = st.checkbox(
            "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —à—É–∫–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏",
            value=True,
            help="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π–¥–µ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∞—à–æ—ó –∑–∞–¥–∞—á—ñ"
        )
        
        if "prev_auto_find_params" not in st.session_state:
            st.session_state["prev_auto_find_params"] = auto_find_params
            print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_auto_find_params: {st.session_state['prev_auto_find_params']}")
            
        if auto_find_params != st.session_state["prev_auto_find_params"]:
            print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ {st.session_state['prev_auto_find_params']} –Ω–∞ {auto_find_params}")
            st.session_state["prev_auto_find_params"] = auto_find_params
            print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_auto_find_params: {st.session_state['prev_auto_find_params']}")
        
        if auto_find_params:
            n_trials = 30
        else:
            st.markdown("**üîß –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:**")
            num_generations = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å:", 100, 1000, 400)
            sol_per_pop = st.slider("–†–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó:", 20, 200, 60)
            
            if "prev_num_generations" not in st.session_state:
                st.session_state["prev_num_generations"] = num_generations
            if num_generations != st.session_state["prev_num_generations"]:
                print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å –∑ {st.session_state['prev_num_generations']} –Ω–∞ {num_generations}")
                st.session_state["prev_num_generations"] = num_generations
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_generations: {st.session_state['prev_num_generations']}")
                
            if "prev_sol_per_pop" not in st.session_state:
                st.session_state["prev_sol_per_pop"] = sol_per_pop
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_sol_per_pop: {st.session_state['prev_sol_per_pop']}")
            
            if sol_per_pop != st.session_state["prev_sol_per_pop"]:
                print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ —Ä–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó –∑ {st.session_state['prev_sol_per_pop']} –Ω–∞ {sol_per_pop}")
                st.session_state["prev_sol_per_pop"] = sol_per_pop
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_sol_per_pop: {st.session_state['prev_sol_per_pop']}")
    
    with col2:
        if auto_find_params:
            st.info("""
            **üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:**
            - –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –∑–Ω–∞–π–¥–µ –Ω–∞–π–∫—Ä–∞—â—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            - –û–ø—Ç–∏–º—ñ–∑—É—î: –ø–æ–∫–æ–ª—ñ–Ω–Ω—è, –ø–æ–ø—É–ª—è—Ü—ñ—é, –±–∞—Ç—å–∫—ñ–≤, –º—É—Ç–∞—Ü—ñ—ó
            - –ì–∞—Ä–∞–Ω—Ç—É—î –Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            """)
        else:
            num_parents_mating = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ç—å–∫—ñ–≤:", 5, 50, 24)
            mutation_percent_genes = st.slider("–í—ñ–¥—Å–æ—Ç–æ–∫ –º—É—Ç–∞—Ü—ñ–π:", 5, 50, 20)
            
            if "prev_num_parents_mating" not in st.session_state:
                st.session_state["prev_num_parents_mating"] = num_parents_mating
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_parents_mating: {st.session_state['prev_num_parents_mating']}")
                
            if num_parents_mating != st.session_state["prev_num_parents_mating"]:
                print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ç—å–∫—ñ–≤ –∑ {st.session_state['prev_num_parents_mating']} –Ω–∞ {num_parents_mating}")
                st.session_state["prev_num_parents_mating"] = num_parents_mating
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_parents_mating: {st.session_state['prev_num_parents_mating']}")
                
            if "prev_mutation_percent_genes" not in st.session_state:
                st.session_state["prev_mutation_percent_genes"] = mutation_percent_genes
            if mutation_percent_genes != st.session_state["prev_mutation_percent_genes"]:
                print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤—ñ–¥—Å–æ—Ç–æ–∫ –º—É—Ç–∞—Ü—ñ–π –∑ {st.session_state['prev_mutation_percent_genes']} –Ω–∞ {mutation_percent_genes}")
                st.session_state["prev_mutation_percent_genes"] = mutation_percent_genes
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_mutation_percent_genes: {st.session_state['prev_mutation_percent_genes']}")
                
            st.info("""
            **‚öôÔ∏è –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
            - –í–∏ —Å–∞–º—ñ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            - –®–≤–∏–¥—à–∏–π –∑–∞–ø—É—Å–∫
            - –ü–æ—Ç—Ä–µ–±—É—î –¥–æ—Å–≤—ñ–¥—É –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ GA
            """)

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é", type="primary", use_container_width=True):
        print("üß¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –±—é–¥–∂–µ—Ç={MAX_RU}, –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤={len(QS_INPUT)}")
        print(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: {auto_find_params}")
        if auto_find_params:
            print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É: –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤={n_trials}")
        else:
            print(f"üìä –†—É—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –ø–æ–∫–æ–ª—ñ–Ω—å={num_generations}, –ø–æ–ø—É–ª—è—Ü—ñ—è={sol_per_pop}, –±–∞—Ç—å–∫–∏={num_parents_mating}, –º—É—Ç–∞—Ü—ñ—ó={mutation_percent_genes}%")
        
        start_time = time.time()
        
        if auto_find_params:
            ga = run_optimization(
                QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU,
                auto_find_params=True,
                n_trials=n_trials,
                verbose=True
            )
        else:
            ga = run_optimization(
                QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU,
                auto_find_params=False,
                num_generations=num_generations,
                sol_per_pop=sol_per_pop,
                num_parents_mating=num_parents_mating,
                mutation_percent_genes=mutation_percent_genes,
                verbose=True
            )
        solution, qs_score, _ = ga.best_solution()
        elapsed_time_ga_full = time.time() - start_time
        print(f"‚úÖ GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time_ga_full:.1f}—Å, QS Score: {qs_score:.2f}")
        result = dict(zip(QS_INPUT.keys(), solution))

        total_ru = compute_total_ru(QS_INPUT, QS_COST, solution)
        
        experiment = save_experiment_to_session(
            algorithm="GA",
            current_qs=current_qs,
            qs_score=qs_score,
            ru_used=total_ru,
            execution_time=elapsed_time_ga_full,
            # parameters=algorithm_params,
            comparison_metrics={
                "improvement": qs_score - current_qs,
                "improvement_percent": ((qs_score - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                "efficiency": (qs_score - current_qs) / total_ru if total_ru > 0 else 0,
                "budget_utilization": total_ru / MAX_RU if MAX_RU > 0 else 0,
                "current_qs": current_qs
            },
            QS_INPUT=QS_INPUT,
            solution=solution
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
        st.session_state["last_ga_experiment"] = experiment

        st.success("‚úÖ **–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.metric("QS Score", f"{qs_score:.2f}", delta=f"{qs_score - current_qs:.2f}")
        with col2:
            st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{total_ru:.0f}", delta=f"{total_ru - MAX_RU:.0f}")
        with col3:
            efficiency = (qs_score - current_qs) / total_ru if total_ru > 0 else 0
            st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}", help="QS Score –Ω–∞ –æ–¥–∏–Ω–∏—Ü—é RU")
        with col4:
            improvement = ((qs_score - current_qs) / current_qs * 100) if current_qs > 0 else 0
            st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")
        with col5:
            st.metric("–ß–∞—Å –æ–±—á–∏—Å–ª–µ–Ω–Ω—è", f"{elapsed_time_ga_full:.1f}—Å")
        
        st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        ru_spent = [
            (float(solution[i]) - float(QS_INPUT[k])) * float(QS_COST[k])
            if float(QS_COST[k]) != float("inf") and (float(solution[i]) - float(QS_INPUT[k])) > 0
            else 0
            for i, k in enumerate(QS_INPUT.keys())
        ]
        result_df = pd.DataFrame({
            "–ü–æ–∫–∞–∑–Ω–∏–∫": list(QS_INPUT.keys()),
            "2025": [float(QS_INPUT[k]) for k in QS_INPUT.keys()],
            "2026 (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)": [float(solution[i]) for i in range(len(solution))],
            "–ü—Ä–∏—Ä—ñ—Å—Ç": [float(solution[i]) - float(QS_INPUT[list(QS_INPUT.keys())[i]]) for i in range(len(solution))],
            "–í–∏—Ç—Ä–∞—Ç–∏ RU": ru_spent
        })
        st.dataframe(result_df, use_container_width=True)
        
        st.subheader("üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ GA")
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        
        indicators = list(QS_INPUT.keys())
        values_2025 = [float(QS_INPUT[k]) for k in indicators]
        values_2026 = [float(solution[i]) for i in range(len(solution))]
        
        x_pos = np.arange(len(indicators))
        width = 0.35
        
        bars1 = ax1.bar(x_pos - width/2, values_2025, width, label='2025', color='#2E86AB', alpha=0.8)
        bars2 = ax1.bar(x_pos + width/2, values_2026, width, label='2026 (GA)', color='#E63946', alpha=0.8)
        
        ax1.set_xlabel('–ü–æ–∫–∞–∑–Ω–∏–∫–∏', fontsize=12, fontweight='bold')
        ax1.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è', fontsize=12, fontweight='bold')
        ax1.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: 2025 vs 2026 (GA)', fontsize=14, fontweight='bold', pad=20)
        ax1.set_xticks(x_pos)
        ax1.set_xticklabels(indicators, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        for bar in bars1:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{height:.1f}', ha='center', va='bottom', fontsize=9)
        for bar in bars2:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{height:.1f}', ha='center', va='bottom', fontsize=9)
        
        improvements = [values_2026[i] - values_2025[i] for i in range(len(indicators))]
        colors = ['#2ECC71' if imp > 0 else '#E74C3C' for imp in improvements]
        
        bars = ax2.bar(indicators, improvements, color=colors, alpha=0.8)
        ax2.set_xlabel('–ü–æ–∫–∞–∑–Ω–∏–∫–∏', fontsize=12, fontweight='bold')
        ax2.set_ylabel('–ü—Ä–∏—Ä—ñ—Å—Ç', fontsize=12, fontweight='bold')
        ax2.set_title('–ü—Ä–∏—Ä—ñ—Å—Ç –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (GA)', fontsize=14, fontweight='bold', pad=20)
        ax2.tick_params(axis='x', rotation=45)
        ax2.grid(True, alpha=0.3)
        
        for bar, imp in zip(bars, improvements):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + (0.1 if height >= 0 else -0.3),
                    f'{imp:.2f}', ha='center', va='bottom' if height >= 0 else 'top', fontsize=9)
        
        costs = []
        efficiencies = []
        for i, k in enumerate(indicators):
            delta = float(solution[i]) - float(QS_INPUT[k])
            if QS_COST[k] < float("inf") and delta > 0:
                cost = float(QS_COST[k]) * delta
                efficiency = delta / cost if cost > 0 else 0
            else:
                cost = 0
                efficiency = 0
            costs.append(cost)
            efficiencies.append(efficiency)
        
        non_zero_indices = [i for i, cost in enumerate(costs) if cost > 0]
        if non_zero_indices:
            filtered_indicators = [indicators[i] for i in non_zero_indices]
            filtered_efficiencies = [efficiencies[i] for i in non_zero_indices]
            filtered_costs = [costs[i] for i in non_zero_indices]
            
            scatter = ax3.scatter(filtered_costs, filtered_efficiencies, 
                                c=filtered_efficiencies, cmap='viridis', s=100, alpha=0.7)
            ax3.set_xlabel('–í–∏—Ç—Ä–∞—Ç–∏ RU', fontsize=12, fontweight='bold')
            ax3.set_ylabel('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–ø—Ä–∏—Ä—ñ—Å—Ç/–≤–∏—Ç—Ä–∞—Ç–∏)', fontsize=12, fontweight='bold')
            ax3.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (GA)', fontsize=14, fontweight='bold', pad=20)
            ax3.grid(True, alpha=0.3)
            
            for i, (cost, eff, ind) in enumerate(zip(filtered_costs, filtered_efficiencies, filtered_indicators)):
                ax3.annotate(ind, (cost, eff), xytext=(5, 5), textcoords='offset points', fontsize=9)
            
            cbar = plt.colorbar(scatter, ax=ax3)
            cbar.set_label('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', fontsize=11, fontweight='bold')
        else:
            ax3.text(0.5, 0.5, '–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç RU', ha='center', va='center', transform=ax3.transAxes, fontsize=12)
            ax3.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (GA)', fontsize=14, fontweight='bold', pad=20)
        
        if any(cost > 0 for cost in costs):
            non_zero_costs = [costs[i] for i in range(len(costs)) if costs[i] > 0]
            non_zero_indicators = [indicators[i] for i in range(len(costs)) if costs[i] > 0]
            
            wedges, texts, autotexts = ax4.pie(non_zero_costs, labels=non_zero_indicators, autopct='%1.1f%%', 
                                              startangle=90, colors=plt.cm.Set3(np.linspace(0, 1, len(non_zero_costs))))
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç RU –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (GA)', fontsize=14, fontweight='bold', pad=20)
            
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
        else:
            ax4.text(0.5, 0.5, '–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç RU', ha='center', va='center', transform=ax4.transAxes, fontsize=12)
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç RU –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (GA)', fontsize=14, fontweight='bold', pad=20)
        
        plt.tight_layout()
        st.pyplot(fig)
        plt.clf()
        
        st.subheader("üìà –î–∏–Ω–∞–º—ñ–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è QS Score")
        plot_progress(ga)
        st.pyplot(plt)
        plt.clf()

        top_df, contrib_df = get_top_solutions(ga, QS_INPUT, QS_COST, QS_WEIGHTS, top_n=10)
        
        st.subheader("üèÜ –¢–æ–ø-10 —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π (—Ç–∞–±–ª–∏—Ü—è)")
        st.dataframe(top_df, use_container_width=True)

        
        st.subheader("üî• Heatmap —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π")
        delta_df = top_df.set_index("#")[list(QS_INPUT.keys())] - pd.Series(QS_INPUT)
        fig, ax = plt.subplots(figsize=(12, 8))
        sns.heatmap(delta_df, cmap="RdYlGn", annot=True, fmt=".2f", ax=ax, 
                    cbar_kws={'label': '–ó–º—ñ–Ω–∞ –ø–æ–∫–∞–∑–Ω–∏–∫–∞'})
        ax.set_title("–ó–º—ñ–Ω–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —É —Ç–æ–ø-10 —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö", fontsize=14, fontweight='bold', pad=20)
        ax.set_xlabel("–ü–æ–∫–∞–∑–Ω–∏–∫–∏", fontsize=12, fontweight='bold')
        ax.set_ylabel("–°—Ç—Ä–∞—Ç–µ–≥—ñ—è", fontsize=12, fontweight='bold')
        plt.tight_layout()
        st.pyplot(fig)
        
        st.subheader("üî• Heatmap —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞)")
        delta_df = top_df.set_index("#")[list(QS_INPUT.keys())] - pd.Series(QS_INPUT)
        norm_df = delta_df.copy()
        for col in norm_df.columns:
            max_delta = norm_df[col].max()
            if max_delta > 0:
                norm_df[col] = norm_df[col] / max_delta
            else:
                norm_df[col] = 0.0

        fig, ax = plt.subplots(figsize=(12, 8))
        sns.heatmap(norm_df, cmap="RdYlGn", annot=True, fmt=".2f", ax=ax,
                    cbar_kws={'label': '–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞'})
        ax.set_title("–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∑–º—ñ–Ω–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —É —Ç–æ–ø-10 —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö", fontsize=14, fontweight='bold', pad=20)
        ax.set_xlabel("–ü–æ–∫–∞–∑–Ω–∏–∫–∏", fontsize=12, fontweight='bold')
        ax.set_ylabel("–°—Ç—Ä–∞—Ç–µ–≥—ñ—è", fontsize=12, fontweight='bold')
        plt.tight_layout()
        st.pyplot(fig)
        

    st.markdown("---")
    st.subheader("üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (LP)")
    st.markdown("""
    **–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.
    - ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–ø—Ç–∏–º—É–º
    - ‚úÖ –®–≤–∏–¥—à–µ –∑–∞ –≥–µ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
    """)

    if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é", use_container_width=True):
        print("üßÆ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
        selected = [k for k, d in QS_DELTA.items() if float(d) > 0]
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –±—é–¥–∂–µ—Ç={MAX_RU}, –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤={len(selected)}")
        start_time = time.time()
        x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
            QS_INPUT=QS_INPUT,
            QS_WEIGHTS=QS_WEIGHTS,
            QS_MAX=QS_MAX,
            QS_DELTA=QS_DELTA,
            QS_COST=QS_COST,
            MAX_RU=MAX_RU,
            selected_indicators=selected,
        )

        deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
        ru_used = sum(
            (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
            for k in QS_INPUT.keys()
        )

        st.success("‚úÖ **LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
        elapsed_time_lp_full = time.time() - start_time
        print(f"‚úÖ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time_lp_full:.1f}—Å, QS Score: {qs_score_lp:.2f}")
        
        experiment = save_experiment_to_session(
            algorithm="LP",
            current_qs=current_qs,
            qs_score=float(qs_score_lp),
            ru_used=ru_used,
            execution_time=elapsed_time_lp_full,
            solution_details={"solution": x_2026, "algorithm": "LP"},
            comparison_metrics={
                "improvement": float(qs_score_lp) - current_qs,
                "improvement_percent": ((float(qs_score_lp) - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                "efficiency": (float(qs_score_lp) - current_qs) / ru_used if ru_used > 0 else 0,
                "budget_utilization": ru_used / MAX_RU if MAX_RU > 0 else 0,
                "current_qs": current_qs
            },
            QS_INPUT=QS_INPUT,
            solution=[float(x_2026[k]) for k in QS_INPUT.keys()]
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
        st.session_state["last_lp_experiment"] = experiment
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.metric("QS Score (LP)", f"{qs_score_lp:.2f}", delta=f"{qs_score_lp - current_qs:.2f}")
        with col2:
            st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{ru_used:.0f}", delta=f"{ru_used - MAX_RU:.0f}")
        with col3:
            efficiency = (qs_score_lp - current_qs) / ru_used if ru_used > 0 else 0
            st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
        with col4:
            improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
            st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")
        with col5:
            st.metric("–ß–∞—Å –æ–±—á–∏—Å–ª–µ–Ω–Ω—è", f"{elapsed_time_lp_full:.1f}—Å")
        
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        st.dataframe(df_lp, use_container_width=True)
        
        st.subheader("üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ LP")
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        
        indicators = list(QS_INPUT.keys())
        values_2025 = [float(QS_INPUT[k]) for k in indicators]
        values_2026 = [float(x_2026[k]) for k in indicators]
        
        x_pos = np.arange(len(indicators))
        width = 0.35
        
        bars1 = ax1.bar(x_pos - width/2, values_2025, width, label='2025', color='#2E86AB', alpha=0.8)
        bars2 = ax1.bar(x_pos + width/2, values_2026, width, label='2026 (LP)', color='#E63946', alpha=0.8)
        
        ax1.set_xlabel('–ü–æ–∫–∞–∑–Ω–∏–∫–∏', fontsize=12, fontweight='bold')
        ax1.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è', fontsize=12, fontweight='bold')
        ax1.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: 2025 vs 2026 (LP)', fontsize=14, fontweight='bold', pad=20)
        ax1.set_xticks(x_pos)
        ax1.set_xticklabels(indicators, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        for bar in bars1:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{height:.1f}', ha='center', va='bottom', fontsize=9)
        for bar in bars2:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{height:.1f}', ha='center', va='bottom', fontsize=9)
        
        improvements = [values_2026[i] - values_2025[i] for i in range(len(indicators))]
        colors = ['#2ECC71' if imp > 0 else '#E74C3C' for imp in improvements]
        
        bars = ax2.bar(indicators, improvements, color=colors, alpha=0.8)
        ax2.set_xlabel('–ü–æ–∫–∞–∑–Ω–∏–∫–∏', fontsize=12, fontweight='bold')
        ax2.set_ylabel('–ü—Ä–∏—Ä—ñ—Å—Ç', fontsize=12, fontweight='bold')
        ax2.set_title('–ü—Ä–∏—Ä—ñ—Å—Ç –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (LP)', fontsize=14, fontweight='bold', pad=20)
        ax2.tick_params(axis='x', rotation=45)
        ax2.grid(True, alpha=0.3)
        
        for bar, imp in zip(bars, improvements):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + (0.1 if height >= 0 else -0.3),
                    f'{imp:.2f}', ha='center', va='bottom' if height >= 0 else 'top', fontsize=9)
        
        costs = []
        efficiencies = []
        for k in indicators:
            delta = float(x_2026[k]) - float(QS_INPUT[k])
            if QS_COST[k] < float("inf") and delta > 0:
                cost = float(QS_COST[k]) * delta
                efficiency = delta / cost if cost > 0 else 0
            else:
                cost = 0
                efficiency = 0
            costs.append(cost)
            efficiencies.append(efficiency)
        
        non_zero_indices = [i for i, cost in enumerate(costs) if cost > 0]
        if non_zero_indices:
            filtered_indicators = [indicators[i] for i in non_zero_indices]
            filtered_efficiencies = [efficiencies[i] for i in non_zero_indices]
            filtered_costs = [costs[i] for i in non_zero_indices]
            
            scatter = ax3.scatter(filtered_costs, filtered_efficiencies, 
                                c=filtered_efficiencies, cmap='viridis', s=100, alpha=0.7)
            ax3.set_xlabel('–í–∏—Ç—Ä–∞—Ç–∏ RU', fontsize=12, fontweight='bold')
            ax3.set_ylabel('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–ø—Ä–∏—Ä—ñ—Å—Ç/–≤–∏—Ç—Ä–∞—Ç–∏)', fontsize=12, fontweight='bold')
            ax3.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
            ax3.grid(True, alpha=0.3)
            
            for i, (cost, eff, ind) in enumerate(zip(filtered_costs, filtered_efficiencies, filtered_indicators)):
                ax3.annotate(ind, (cost, eff), xytext=(5, 5), textcoords='offset points', fontsize=9)
            
            cbar = plt.colorbar(scatter, ax=ax3)
            cbar.set_label('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', fontsize=11, fontweight='bold')
        else:
            ax3.text(0.5, 0.5, '–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç RU', ha='center', va='center', transform=ax3.transAxes, fontsize=12)
            ax3.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
        
        if any(cost > 0 for cost in costs):
            non_zero_costs = [costs[i] for i in range(len(costs)) if costs[i] > 0]
            non_zero_indicators = [indicators[i] for i in range(len(costs)) if costs[i] > 0]
            
            wedges, texts, autotexts = ax4.pie(non_zero_costs, labels=non_zero_indicators, autopct='%1.1f%%', 
                                              startangle=90, colors=plt.cm.Set3(np.linspace(0, 1, len(non_zero_costs))))
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç RU –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
            
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
        else:
            ax4.text(0.5, 0.5, '–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç RU', ha='center', va='center', transform=ax4.transAxes, fontsize=12)
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç RU –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
        
        plt.tight_layout()
        st.pyplot(fig)
        plt.clf()
    
    # AI –ê–Ω–∞–ª—ñ–∑ —Å–µ–∫—Ü—ñ—è - –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
    st.markdown("---")
    st.subheader("ü§ñ AI –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (GA)", type="primary", use_container_width=True):
            print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É GA –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç GA –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó..."):
                try:
                    import sys
                    from pathlib import Path
                    sys.path.insert(0, str(Path(__file__).parent.parent))
                    from llm import generate_qs_insights
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                    if "last_ga_experiment" in st.session_state:
                        experiment = st.session_state["last_ga_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights_ga"] = insights_result
                        st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ GA –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                    else:
                        st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö GA –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É**")
                        st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å GA –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é")
                    
                except Exception as e:
                    st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                    st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    with col2:
        if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (LP)", type="primary", use_container_width=True):
            print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó..."):
                try:
                    import sys
                    from pathlib import Path
                    sys.path.insert(0, str(Path(__file__).parent.parent))
                    from llm import generate_qs_insights
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                    if "last_lp_experiment" in st.session_state:
                        experiment = st.session_state["last_lp_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights_lp"] = insights_result
                        st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ LP –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                    else:
                        st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö LP –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É**")
                        st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é")
                    
                except Exception as e:
                    st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                    st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏ (GA –∞–±–æ LP) - –∑–∞–º—ñ–Ω—é—î–º–æ –æ–¥–∏–Ω –æ–¥–Ω–∏–º
    if "last_insights_ga" in st.session_state or "last_insights_lp" in st.session_state:
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—Å–∞–π—Ç
        if "last_insights_lp" in st.session_state:
            insights = st.session_state["last_insights_lp"]
            algorithm_name = "LP"
        else:
            insights = st.session_state["last_insights_ga"]
            algorithm_name = "GA"
        
        if insights["status"] == "success":
            st.subheader(f"üí° AI –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({algorithm_name})")
            st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                
        elif insights["status"] == "no_api":
            st.error("‚ùå **API –∫–ª—é—á Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
            st.info("üí° –î–æ–¥–∞–π—Ç–µ GOOGLE_API_KEY –≤ —Ñ–∞–π–ª .env")
        elif insights["status"] == "error":
            st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        elif insights["status"] == "empty":
            st.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM")

with tab2:
    st.subheader("üéØ –í–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
    st.markdown("""
    **–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –î–æ–∑–≤–æ–ª—è—î –≤–∞–º –≤—Ä—É—á–Ω—É –æ–±—Ä–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.
    - ‚úÖ –ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ç–∏–º, —â–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏
    - ‚úÖ –ú–æ–∂–Ω–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
    - ‚úÖ –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    """)

    all_keys = list(QS_INPUT.keys())
    default_selected = [k for k in all_keys if float(QS_DELTA.get(k, 0.0)) > 0]
    if "SELECTED_INDICATORS" not in st.session_state:
        st.session_state["SELECTED_INDICATORS"] = default_selected

    new_selection = st.multiselect(
        "üîç –û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:",
        options=all_keys,
        default=st.session_state["SELECTED_INDICATORS"],
        key="SELECTED_INDICATORS",
        help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó. –Ü–Ω—à—ñ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏."
    )
    selected_keys = list(new_selection) or []
    
    if set(selected_keys) != set(st.session_state.get("SELECTED_INDICATORS", [])):
        print(f"üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {selected_keys}")
        print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó SELECTED_INDICATORS: {st.session_state['SELECTED_INDICATORS']}")
        st.session_state["SELECTED_INDICATORS"] = selected_keys

    if not selected_keys:
        st.warning("‚ö†Ô∏è **–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó!**")
    else:
        st.info(f"üìä **–û–±—Ä–∞–Ω–æ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤:** {len(selected_keys)} –∑ {len(all_keys)}")
        
        st.markdown("**‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ç–∏—á–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            auto_find_params_selected = st.checkbox(
                "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —à—É–∫–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏", 
                value=True,
                help="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π–¥–µ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∞—à–æ—ó –∑–∞–¥–∞—á—ñ",
                key="auto_find_params_selected"
            )
            
            # –õ–æ–≥—É—î–º–æ –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            if "prev_auto_find_params_selected" not in st.session_state:
                st.session_state["prev_auto_find_params_selected"] = auto_find_params_selected
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_auto_find_params_selected: {st.session_state['prev_auto_find_params_selected']}")
                
            if auto_find_params_selected != st.session_state["prev_auto_find_params_selected"]:
                print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –∑ {st.session_state['prev_auto_find_params_selected']} –Ω–∞ {auto_find_params_selected}")
                st.session_state["prev_auto_find_params_selected"] = auto_find_params_selected
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_auto_find_params_selected: {st.session_state['prev_auto_find_params_selected']}")
            
            if auto_find_params_selected:
                # st.markdown("**üîß –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:**")
                n_trials_selected = 30
                timeout_minutes_selected = 8
                
                if "prev_n_trials_selected" not in st.session_state:
                    st.session_state["prev_n_trials_selected"] = n_trials_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_n_trials_selected: {st.session_state['prev_n_trials_selected']}")
            else:
                st.markdown("**üîß –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:**")
                num_generations_selected = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å:", 100, 1000, 400, key="num_generations_selected")
                sol_per_pop_selected = st.slider("–†–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó:", 20, 200, 60, key="sol_per_pop_selected")
                
                if "prev_num_generations_selected" not in st.session_state:
                    st.session_state["prev_num_generations_selected"] = num_generations_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_generations_selected: {st.session_state['prev_num_generations_selected']}")
                if num_generations_selected != st.session_state["prev_num_generations_selected"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –∑ {st.session_state['prev_num_generations_selected']} –Ω–∞ {num_generations_selected}")
                    st.session_state["prev_num_generations_selected"] = num_generations_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_generations_selected: {st.session_state['prev_num_generations_selected']}")
                    
                if "prev_sol_per_pop_selected" not in st.session_state:
                    st.session_state["prev_sol_per_pop_selected"] = sol_per_pop_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_sol_per_pop_selected: {st.session_state['prev_sol_per_pop_selected']}")
                if sol_per_pop_selected != st.session_state["prev_sol_per_pop_selected"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ —Ä–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –∑ {st.session_state['prev_sol_per_pop_selected']} –Ω–∞ {sol_per_pop_selected}")
                    st.session_state["prev_sol_per_pop_selected"] = sol_per_pop_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_sol_per_pop_selected: {st.session_state['prev_sol_per_pop_selected']}")
        
        with col2:
            if auto_find_params_selected:
                st.info("""
                **üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:**
                - –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –∑–Ω–∞–π–¥–µ –Ω–∞–π–∫—Ä–∞—â—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                - –û–ø—Ç–∏–º—ñ–∑—É—î: –ø–æ–∫–æ–ª—ñ–Ω–Ω—è, –ø–æ–ø—É–ª—è—Ü—ñ—é, –±–∞—Ç—å–∫—ñ–≤, –º—É—Ç–∞—Ü—ñ—ó
                - –ì–∞—Ä–∞–Ω—Ç—É—î –Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                """)
            else:
                num_parents_mating_selected = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ç—å–∫—ñ–≤:", 5, 50, 24, key="num_parents_mating_selected")
                mutation_percent_genes_selected = st.slider("–í—ñ–¥—Å–æ—Ç–æ–∫ –º—É—Ç–∞—Ü—ñ–π:", 5, 50, 20, key="mutation_percent_genes_selected")

                if "prev_num_parents_mating_selected" not in st.session_state:
                    st.session_state["prev_num_parents_mating_selected"] = num_parents_mating_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_parents_mating_selected: {st.session_state['prev_num_parents_mating_selected']}")
                if num_parents_mating_selected != st.session_state["prev_num_parents_mating_selected"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ç—å–∫—ñ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –∑ {st.session_state['prev_num_parents_mating_selected']} –Ω–∞ {num_parents_mating_selected}")
                    st.session_state["prev_num_parents_mating_selected"] = num_parents_mating_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_parents_mating_selected: {st.session_state['prev_num_parents_mating_selected']}")
                    
                if "prev_mutation_percent_genes_selected" not in st.session_state:
                    st.session_state["prev_mutation_percent_genes_selected"] = mutation_percent_genes_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_mutation_percent_genes_selected: {st.session_state['prev_mutation_percent_genes_selected']}")  
                if mutation_percent_genes_selected != st.session_state["prev_mutation_percent_genes_selected"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤—ñ–¥—Å–æ—Ç–æ–∫ –º—É—Ç–∞—Ü—ñ–π –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –∑ {st.session_state['prev_mutation_percent_genes_selected']} –Ω–∞ {mutation_percent_genes_selected}")
                    st.session_state["prev_mutation_percent_genes_selected"] = mutation_percent_genes_selected
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_mutation_percent_genes_selected: {st.session_state['prev_mutation_percent_genes_selected']}")
                    
                st.info("""
                **‚öôÔ∏è –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
                - –í–∏ —Å–∞–º—ñ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
                - –®–≤–∏–¥—à–∏–π –∑–∞–ø—É—Å–∫
                - –ü–æ—Ç—Ä–µ–±—É—î –¥–æ—Å–≤—ñ–¥—É –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ GA
                """)
        
        cols = st.columns(2)
        with cols[0]:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ GA (–æ–±—Ä–∞–Ω—ñ)", key="ga_selected", type="primary", use_container_width=True):
                print(f"üß¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {selected_keys}")
                print(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: {auto_find_params_selected}")
                if auto_find_params_selected:
                    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö: –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤={n_trials_selected}, —á–∞—Å={timeout_minutes_selected}—Ö–≤")
                else:
                    print(f"üìä –†—É—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö: –ø–æ–∫–æ–ª—ñ–Ω—å={num_generations_selected}, –ø–æ–ø—É–ª—è—Ü—ñ—è={sol_per_pop_selected}, –±–∞—Ç—å–∫–∏={num_parents_mating_selected}, –º—É—Ç–∞—Ü—ñ—ó={mutation_percent_genes_selected}%")
                
                start_time = time.time()
                effective_delta = {k: (float(QS_DELTA[k]) if k in selected_keys else 0.0) for k in all_keys}
                
                if auto_find_params_selected:
                    ga = run_optimization(
                        QS_INPUT, QS_WEIGHTS, QS_MAX, effective_delta, QS_COST, MAX_RU,
                        auto_find_params=True,
                        n_trials=n_trials_selected,
                        verbose=True
                    )
                else:
                    ga = run_optimization(
                        QS_INPUT, QS_WEIGHTS, QS_MAX, effective_delta, QS_COST, MAX_RU,
                        auto_find_params=False,
                        num_generations=num_generations_selected,
                        sol_per_pop=sol_per_pop_selected,
                        num_parents_mating=num_parents_mating_selected,
                        mutation_percent_genes=mutation_percent_genes_selected,
                        verbose=True
                    )
                
                solution, qs_score, _ = ga.best_solution()
                print(f"‚úÖ GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, QS Score: {qs_score:.2f}")

                total_ru = compute_total_ru(QS_INPUT, QS_COST, solution)
                
                experiment = save_experiment_to_session(
                    algorithm="GA_Selected",
                    current_qs=current_qs,
                    qs_score=qs_score,
                    ru_used=total_ru,
                    execution_time=time.time() - start_time,
                    comparison_metrics={
                        "improvement": qs_score - current_qs,
                        "improvement_percent": ((qs_score - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                        "efficiency": (qs_score - current_qs) / total_ru if total_ru > 0 else 0,
                        "budget_utilization": total_ru / MAX_RU if MAX_RU > 0 else 0,
                        "current_qs": current_qs
                    },
                    QS_INPUT=QS_INPUT,
                    solution=solution
                )

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
                st.session_state["last_ga_selected_experiment"] = experiment

                st.success("‚úÖ **GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("QS Score", f"{qs_score:.2f}", delta=f"{qs_score - current_qs:.2f}")
                with col2:
                    st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{total_ru:.0f}", delta=f"{total_ru - MAX_RU:.0f}")
                with col3:
                    efficiency = (qs_score - current_qs) / total_ru if total_ru > 0 else 0
                    st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
                with col4:
                    improvement = ((qs_score - current_qs) / current_qs * 100) if current_qs > 0 else 0
                    st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")

                st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (GA, –æ–±—Ä–∞–Ω—ñ)")
                result_df = pd.DataFrame({
                    "–ü–æ–∫–∞–∑–Ω–∏–∫": list(QS_INPUT.keys()),
                    "2025": list(QS_INPUT.values()),
                    "2026 (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)": solution,
                    "–ü—Ä–∏—Ä—ñ—Å—Ç": [solution[i] - list(QS_INPUT.values())[i] for i in range(len(QS_INPUT))]
                })
                st.dataframe(result_df, use_container_width=True)

        with cols[1]:
            if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ LP (–æ–±—Ä–∞–Ω—ñ)", key="lp_selected", use_container_width=True):
                print(f"üßÆ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {selected_keys}")
                start_time = time.time()
                x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
                    QS_INPUT=QS_INPUT,
                    QS_WEIGHTS=QS_WEIGHTS,
                    QS_MAX=QS_MAX,
                    QS_DELTA=QS_DELTA,
                    QS_COST=QS_COST,
                    MAX_RU=MAX_RU,
                    selected_indicators=selected_keys,
                )
                print(f"‚úÖ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, QS Score: {qs_score_lp:.2f}")

                deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
                ru_used = sum(
                    (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
                    for k in QS_INPUT.keys()
                )
                
                experiment = save_experiment_to_session(
                    algorithm="LP_Selected",
                    current_qs=current_qs,
                    qs_score=float(qs_score_lp),
                    ru_used=ru_used,
                    execution_time=time.time() - start_time,
                    solution_details={"solution": x_2026, "algorithm": "LP"},
                    comparison_metrics={
                        "improvement": float(qs_score_lp) - current_qs,
                        "improvement_percent": ((float(qs_score_lp) - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                        "efficiency": (float(qs_score_lp) - current_qs) / ru_used if ru_used > 0 else 0,
                        "budget_utilization": ru_used / MAX_RU if MAX_RU > 0 else 0,
                        "current_qs": current_qs
                    },
                    QS_INPUT=QS_INPUT,
                    solution=[float(x_2026[k]) for k in QS_INPUT.keys()]
                )

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
                st.session_state["last_lp_selected_experiment"] = experiment

                st.success("‚úÖ **LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("QS Score (LP)", f"{qs_score_lp:.2f}", delta=f"{qs_score_lp - current_qs:.2f}")
                with col2:
                    st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{ru_used:.0f}", delta=f"{ru_used - MAX_RU:.0f}")
                with col3:
                    efficiency = (qs_score_lp - current_qs) / ru_used if ru_used > 0 else 0
                    st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
                with col4:
                    improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
                    st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")

                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–æ–±—Ä–∞–Ω—ñ)")
                st.dataframe(df_lp, use_container_width=True)

    # AI –ê–Ω–∞–ª—ñ–∑ —Å–µ–∫—Ü—ñ—è –¥–ª—è —Ç–∞–±—É 2 - –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
    st.markdown("---")
    st.subheader("ü§ñ AI –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–æ–±—Ä–∞–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏)")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (GA –æ–±—Ä–∞–Ω—ñ)", type="primary", use_container_width=True):
            print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É GA –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
            with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç GA –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤..."):
                try:
                    import sys
                    from pathlib import Path
                    sys.path.insert(0, str(Path(__file__).parent.parent))
                    from llm import generate_qs_insights
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                    if "last_ga_selected_experiment" in st.session_state:
                        experiment = st.session_state["last_ga_selected_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights_ga_selected"] = insights_result
                        st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ GA (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                    else:
                        st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö GA –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**")
                        st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å GA –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
                    
                except Exception as e:
                    st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                    st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    with col2:
        if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (LP –æ–±—Ä–∞–Ω—ñ)", type="primary", use_container_width=True):
            print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
            with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤..."):
                try:
                    import sys
                    from pathlib import Path
                    sys.path.insert(0, str(Path(__file__).parent.parent))
                    from llm import generate_qs_insights
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                    if "last_lp_selected_experiment" in st.session_state:
                        experiment = st.session_state["last_lp_selected_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights_lp_selected"] = insights_result
                        st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ LP (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                    else:
                        st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö LP –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**")
                        st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
                    
                except Exception as e:
                    st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                    st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏ (GA –∞–±–æ LP) - –∑–∞–º—ñ–Ω—é—î–º–æ –æ–¥–∏–Ω –æ–¥–Ω–∏–º
    if "last_insights_ga_selected" in st.session_state or "last_insights_lp_selected" in st.session_state:
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—Å–∞–π—Ç
        if "last_insights_lp_selected" in st.session_state:
            insights = st.session_state["last_insights_lp_selected"]
            algorithm_name = "LP –æ–±—Ä–∞–Ω—ñ"
        else:
            insights = st.session_state["last_insights_ga_selected"]
            algorithm_name = "GA –æ–±—Ä–∞–Ω—ñ"
        
        if insights["status"] == "success":
            st.subheader(f"üí° AI –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({algorithm_name})")
            st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                
        elif insights["status"] == "no_api":
            st.error("‚ùå **API –∫–ª—é—á Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
            st.info("üí° –î–æ–¥–∞–π—Ç–µ GOOGLE_API_KEY –≤ —Ñ–∞–π–ª .env")
        elif insights["status"] == "error":
            st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        elif insights["status"] == "empty":
            st.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM")

with tab3:
    st.subheader("üèÜ –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π")
    st.markdown("""
    **–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∑ N –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.
    - üîç –ü–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
    - üèÜ –ü–æ–∫–∞–∑—É—î —Ç–æ–ø-3 –Ω–∞–π–∫—Ä–∞—â—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
    - üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
    - ‚ö° –®–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è
    """)

    def get_eligible_indicators():
        eligible = []
        for key in QS_INPUT.keys():
            if (float(QS_DELTA.get(key, 0.0)) > 0.0 and 
                float(QS_COST.get(key, 0.0)) != float("inf")):
                eligible.append(key)
        return eligible

    eligible = get_eligible_indicators()

    if len(eligible) < 2:
        st.error("‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è!**")
        st.markdown(f"""
        **–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑:**
        - Delta > 0 (–º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏)
        - –°–∫—ñ–Ω—á–µ–Ω–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å (–Ω–µ ‚àû)
        
        **–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(eligible) if eligible else '–ù–µ–º–∞—î'}
        
        **–†—ñ—à–µ–Ω–Ω—è:** –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —ñ –∑–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.
        """)
    else:
        st.success(f"‚úÖ **–ó–Ω–∞–π–¥–µ–Ω–æ {len(eligible)} –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è**")
        st.markdown(f"**–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(eligible)}")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É:**")
            num_indicators = st.selectbox(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:",
                options=list(range(2, min(len(eligible) + 1, 6))),
                index=1,
                help=f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {len(eligible)}",
                key="topn_num_indicators"
            )
            
            if "prev_num_indicators" not in st.session_state:
                st.session_state["prev_num_indicators"] = num_indicators
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_indicators: {st.session_state['prev_num_indicators']}")
            if num_indicators != st.session_state["prev_num_indicators"]:
                print(f"üî¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è —Ç–æ–ø-N –∑ {st.session_state['prev_num_indicators']} –Ω–∞ {num_indicators}")
                st.session_state["prev_num_indicators"] = num_indicators
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_indicators: {st.session_state['prev_num_indicators']}")
            
        with col2:
            st.markdown("**üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GA –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:**")
            auto_find_params_topn = st.checkbox(
                "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —à—É–∫–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ GA", 
                value=True,
                help="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π–¥–µ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó",
                key="auto_find_params_topn"
            )
            

            if "prev_auto_find_params_topn" not in st.session_state:
                st.session_state["prev_auto_find_params_topn"] = auto_find_params_topn
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_auto_find_params_topn: {st.session_state['prev_auto_find_params_topn']}")
                
            if auto_find_params_topn != st.session_state["prev_auto_find_params_topn"]:
                print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ç–æ–ø-N –∑ {st.session_state['prev_auto_find_params_topn']} –Ω–∞ {auto_find_params_topn}")
                st.session_state["prev_auto_find_params_topn"] = auto_find_params_topn
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_auto_find_params_topn: {st.session_state['prev_auto_find_params_topn']}")
            
            if auto_find_params_topn:
                n_trials_topn = 10

                if "prev_n_trials_topn" not in st.session_state:
                    st.session_state["prev_n_trials_topn"] = n_trials_topn
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_n_trials_topn: {st.session_state['prev_n_trials_topn']}")
            else:
                st.markdown("**üîß –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:**")
                num_generations = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å:", 100, 500, 200, key="topn_generations", help="–ë—ñ–ª—å—à–µ –ø–æ–∫–æ–ª—ñ–Ω—å = –∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –∞–ª–µ –¥–æ–≤—à–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è")
                sol_per_pop = st.slider("–†–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó:", 20, 100, 48, key="topn_pop_size", help="–ë—ñ–ª—å—à–∞ –ø–æ–ø—É–ª—è—Ü—ñ—è = –±—ñ–ª—å—à–µ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É")
                num_parents_mating = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ç—å–∫—ñ–≤:", 10, 50, 20, key="topn_parents", help="–°–∫—ñ–ª—å–∫–∏ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Ä—ñ—à–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞—â–∞–¥–∫—ñ–≤")
                mutation_percent_genes = st.slider("–í—ñ–¥—Å–æ—Ç–æ–∫ –º—É—Ç–∞—Ü—ñ–π:", 5, 50, 20, key="topn_mutations", help="–í—ñ–¥—Å–æ—Ç–æ–∫ –≥–µ–Ω—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å –∑–º—ñ–Ω–µ–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤–æ")
                
                if "prev_num_generations_topn" not in st.session_state:
                    st.session_state["prev_num_generations_topn"] = num_generations
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_generations_topn: {st.session_state['prev_num_generations_topn']}")
                if num_generations != st.session_state["prev_num_generations_topn"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å –¥–ª—è —Ç–æ–ø-N –∑ {st.session_state['prev_num_generations_topn']} –Ω–∞ {num_generations}")
                    st.session_state["prev_num_generations_topn"] = num_generations
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_generations_topn: {st.session_state['prev_num_generations_topn']}")
                    
                if "prev_sol_per_pop_topn" not in st.session_state:
                    st.session_state["prev_sol_per_pop_topn"] = sol_per_pop
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_sol_per_pop_topn: {st.session_state['prev_sol_per_pop_topn']}")
                if sol_per_pop != st.session_state["prev_sol_per_pop_topn"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ —Ä–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó –¥–ª—è —Ç–æ–ø-N –∑ {st.session_state['prev_sol_per_pop_topn']} –Ω–∞ {sol_per_pop}")
                    st.session_state["prev_sol_per_pop_topn"] = sol_per_pop
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_sol_per_pop_topn: {st.session_state['prev_sol_per_pop_topn']}")
                if "prev_num_parents_mating_topn" not in st.session_state:
                    st.session_state["prev_num_parents_mating_topn"] = num_parents_mating
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_parents_mating_topn: {st.session_state['prev_num_parents_mating_topn']}")
                if num_parents_mating != st.session_state["prev_num_parents_mating_topn"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ç—å–∫—ñ–≤ –¥–ª—è —Ç–æ–ø-N –∑ {st.session_state['prev_num_parents_mating_topn']} –Ω–∞ {num_parents_mating}")
                    st.session_state["prev_num_parents_mating_topn"] = num_parents_mating
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_num_parents_mating_topn: {st.session_state['prev_num_parents_mating_topn']}")
                    
                if "prev_mutation_percent_genes_topn" not in st.session_state:
                    st.session_state["prev_mutation_percent_genes_topn"] = mutation_percent_genes
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_mutation_percent_genes_topn: {st.session_state['prev_mutation_percent_genes_topn']}")
                if mutation_percent_genes != st.session_state["prev_mutation_percent_genes_topn"]:
                    print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤—ñ–¥—Å–æ—Ç–æ–∫ –º—É—Ç–∞—Ü—ñ–π –¥–ª—è —Ç–æ–ø-N –∑ {st.session_state['prev_mutation_percent_genes_topn']} –Ω–∞ {mutation_percent_genes}")
                    st.session_state["prev_mutation_percent_genes_topn"] = mutation_percent_genes
                    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_mutation_percent_genes_topn: {st.session_state['prev_mutation_percent_genes_topn']}")
                    
        total_combinations = len(list(combinations(eligible, num_indicators)))
        st.info(f"üìä **–ë—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {total_combinations} –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**")
        
        st.markdown("### üîß –í–∏–±—ñ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        
        col1, col2 = st.columns(2)
        
        algorithm = st.radio(
            "–û–±–µ—Ä—ñ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:",
            options=["–ì–µ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º (GA)", "–õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (LP)"],
            index=0,
            help="GA - –±—ñ–ª—å—à –≥–Ω—É—á–∫–∏–π, LP - —à–≤–∏–¥—à–∏–π —Ç–∞ —Ç–æ—á–Ω—ñ—à–∏–π"
        )
        

        if "prev_algorithm" not in st.session_state:
            st.session_state["prev_algorithm"] = algorithm
            print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_algorithm: {st.session_state['prev_algorithm']}")
        if algorithm != st.session_state["prev_algorithm"]:
            print(f"üîß –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –∞–ª–≥–æ—Ä–∏—Ç–º —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑ '{st.session_state['prev_algorithm']}' –Ω–∞ '{algorithm}'")
            st.session_state["prev_algorithm"] = algorithm
            print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó prev_algorithm: {st.session_state['prev_algorithm']}")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é (GA)", type="primary", use_container_width=True, disabled=(algorithm != "–ì–µ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º (GA)")):
                if algorithm == "–ì–µ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º (GA)":
                    print(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ —Ç–æ–ø-N GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é: {num_indicators} –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑ {len(eligible)} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö")
                    print(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: {auto_find_params_topn}")
                    if auto_find_params_topn:
                        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –¥–ª—è —Ç–æ–ø-N: –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤={n_trials_topn}")
                    else:
                        print(f"üìä –†—É—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ç–æ–ø-N: –ø–æ–∫–æ–ª—ñ–Ω—å={num_generations}, –ø–æ–ø—É–ª—è—Ü—ñ—è={sol_per_pop}, –±–∞—Ç—å–∫–∏={num_parents_mating}, –º—É—Ç–∞—Ü—ñ—ó={mutation_percent_genes}%")
                    
                    if auto_find_params_topn:
                        run_top_n_ga_optimization(eligible, num_indicators, None, None, None, None, QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU, current_qs, auto_find_params=True, n_trials=n_trials_topn)
                    else:
                        run_top_n_ga_optimization(eligible, num_indicators, num_generations, sol_per_pop, num_parents_mating, mutation_percent_genes, QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU, current_qs, auto_find_params=False)
        
        with col2:
            if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é (LP)", type="primary", use_container_width=True, disabled=(algorithm != "–õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (LP)")):
                if algorithm == "–õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (LP)":
                    print(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ —Ç–æ–ø-N LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é: {num_indicators} –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑ {len(eligible)} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö")
                    run_top_n_lp_optimization(eligible, num_indicators, QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU, current_qs)

    # AI –ê–Ω–∞–ª—ñ–∑ —Å–µ–∫—Ü—ñ—è –¥–ª—è —Ç–∞–±—É 3 - –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
    st.markdown("---")
    st.subheader("ü§ñ AI –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (—Ç–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó)")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (GA —Ç–æ–ø-N)", type="primary", use_container_width=True):
            print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É GA —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç GA —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó..."):
                try:
                    import sys
                    from pathlib import Path
                    sys.path.insert(0, str(Path(__file__).parent.parent))
                    from llm import generate_qs_insights
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                    if "last_ga_topn_experiment" in st.session_state:
                        experiment = st.session_state["last_ga_topn_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights_ga_topn"] = insights_result
                        st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ GA (—Ç–æ–ø-N) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                    else:
                        st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö GA –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É —Ç–æ–ø-N**")
                        st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å GA —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é")
                    
                except Exception as e:
                    st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                    st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    with col2:
        if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (LP —Ç–æ–ø-N)", type="primary", use_container_width=True):
            print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LP —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç LP —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó..."):
                try:
                    import sys
                    from pathlib import Path
                    sys.path.insert(0, str(Path(__file__).parent.parent))
                    from llm import generate_qs_insights
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                    if "last_lp_topn_experiment" in st.session_state:
                        experiment = st.session_state["last_lp_topn_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights_lp_topn"] = insights_result
                        st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ LP (—Ç–æ–ø-N) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                    else:
                        st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö LP –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É —Ç–æ–ø-N**")
                        st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å LP —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é")
                    
                except Exception as e:
                    st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                    st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏ (GA –∞–±–æ LP —Ç–æ–ø-N) - –∑–∞–º—ñ–Ω—é—î–º–æ –æ–¥–∏–Ω –æ–¥–Ω–∏–º
    if "last_insights_ga_topn" in st.session_state or "last_insights_lp_topn" in st.session_state:
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—Å–∞–π—Ç
        if "last_insights_lp_topn" in st.session_state:
            insights = st.session_state["last_insights_lp_topn"]
            algorithm_name = "LP —Ç–æ–ø-N"
        else:
            insights = st.session_state["last_insights_ga_topn"]
            algorithm_name = "GA —Ç–æ–ø-N"
        
        if insights["status"] == "success":
            st.subheader(f"üí° AI –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({algorithm_name})")
            st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                
        elif insights["status"] == "no_api":
            st.error("‚ùå **API –∫–ª—é—á Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
            st.info("üí° –î–æ–¥–∞–π—Ç–µ GOOGLE_API_KEY –≤ —Ñ–∞–π–ª .env")
        elif insights["status"] == "error":
            st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        elif insights["status"] == "empty":
            st.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM")

with tab4:
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤")
    st.markdown("**–ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—Ö –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —ó—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤**")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Å—ñ—ó
    experiments = st.session_state.get("experiments_data", [])
    
    if not experiments:
        st.info("üìä **–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—Ö –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤.**")
        st.markdown("""
        **–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–∞–Ω—ñ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤:**
        1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±—É–¥—å-—è–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        2. –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É –¥–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç—å—Å—è
        3. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Ü—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        """)
    else:
        st.success(f"üìä **–ó–Ω–∞–π–¥–µ–Ω–æ {len(experiments)} –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤**")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        algorithms_used = list(set(exp["algorithm"] for exp in experiments))
        best_qs = max(exp["qs_score"] for exp in experiments) if experiments else 0
        avg_qs = sum(exp["qs_score"] for exp in experiments) / len(experiments) if experiments else 0
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å—å–æ–≥–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤", len(experiments))
        with col2:
            st.metric("–ù–∞–π–∫—Ä–∞—â–∏–π QS Score", f"{best_qs:.3f}")
        with col3:
            st.metric("–°–µ—Ä–µ–¥–Ω—ñ–π QS Score", f"{avg_qs:.3f}")
        with col4:
            st.metric("–ê–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ", len(algorithms_used))
        
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
        st.subheader("üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤")
        col1, col2 = st.columns(2)
        
        with col1:
            selected_algorithm = st.selectbox(
                "–ê–ª–≥–æ—Ä–∏—Ç–º:",
                options=["–í—Å—ñ"] + algorithms_used,
                key="filter_algorithm"
            )
        
        with col2:
            sort_by = st.selectbox(
                "–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞:",
                options=["QS Score", "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", "–î–∞—Ç–∞"],
                key="sort_experiments"
            )
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏
        filtered_experiments = experiments
        if selected_algorithm != "–í—Å—ñ":
            filtered_experiments = [exp for exp in filtered_experiments if exp["algorithm"] == selected_algorithm]
        
        # –°–æ—Ä—Ç—É—î–º–æ
        if sort_by == "QS Score":
            filtered_experiments = sorted(filtered_experiments, key=lambda x: x["qs_score"], reverse=True)
        elif sort_by == "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è":
            filtered_experiments = sorted(filtered_experiments, key=lambda x: x["execution_time"])
        else:  # –î–∞—Ç–∞
            filtered_experiments = sorted(filtered_experiments, key=lambda x: x["timestamp"], reverse=True)
        
        st.subheader(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ ({len(filtered_experiments)} –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤)")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        display_data = []
        for i, exp in enumerate(filtered_experiments, 1):
            row = {
                "#": i,
                "–ê–ª–≥–æ—Ä–∏—Ç–º": exp["algorithm"],
                "QS Score": f"{exp['qs_score']:.3f}",
                "RU –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ": f"{exp['ru_used']:.1f}",
                "–ß–∞—Å (—Å)": f"{exp['execution_time']:.1f}",
                "–î–∞—Ç–∞": exp["timestamp"][:19].replace("T", " "),
                "–ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏": ", ".join(exp.get("improved_indicators", [])) or "–Ω–µ–º–∞—î"
            }
            
            # –î–æ–¥–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —è–∫—â–æ —î
            if "comparison_metrics" in exp and exp["comparison_metrics"]:
                metrics = exp["comparison_metrics"]
                row["–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è"] = f"{metrics.get('improvement', 0):.3f}"
                row["–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"] = f"{metrics.get('efficiency', 0):.3f}"
                row["–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"] = f"{metrics.get('budget_utilization', 0):.1%}"
            
            display_data.append(row)
        
        if display_data:
            df_display = pd.DataFrame(display_data)
            st.dataframe(df_display, use_container_width=True)
            
            # –ù–∞–π–∫—Ä–∞—â–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
            best_exp = max(experiments, key=lambda x: x["qs_score"]) if experiments else None
            if best_exp:
                st.subheader("üèÜ –ù–∞–π–∫—Ä–∞—â–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–ê–ª–≥–æ—Ä–∏—Ç–º", best_exp["algorithm"])
                with col2:
                    st.metric("QS Score", f"{best_exp['qs_score']:.3f}")
                with col3:
                    st.metric("RU –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ", f"{best_exp['ru_used']:.1f}")
                with col4:
                    st.metric("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", f"{best_exp['execution_time']:.1f}—Å")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
                improved_indicators = best_exp.get("improved_indicators", [])
                if improved_indicators:
                    st.info(f"üéØ **–ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(improved_indicators)}")
                else:
                    st.info("üéØ **–ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** –Ω–µ–º–∞—î")
        
        # –ö–Ω–æ–ø–∫–∏ –µ–∫—Å–ø–æ—Ä—Ç—É
        st.subheader("üíæ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä –ï–∫—Å–ø–æ—Ä—Ç –≤ CSV", use_container_width=True):
                if experiments:
                    df_export = pd.DataFrame(experiments)
                    csv = df_export.to_csv(index=False, encoding='utf-8')
                    st.download_button(
                        label="üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
                        data=csv,
                        file_name=f"experiments_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                else:
                    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
        
        with col2:
            if st.button("üìã –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", use_container_width=True):
                stats = {
                    "total_experiments": len(experiments),
                    "algorithms_used": algorithms_used,
                    "best_qs_score": best_qs,
                    "avg_qs_score": avg_qs,
                    "avg_execution_time": sum(exp["execution_time"] for exp in experiments) / len(experiments) if experiments else 0
                }
                st.json(stats)
        
        with col3:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ", use_container_width=True):
                if st.session_state.get("confirm_clear", False):
                    st.session_state["experiments_data"] = []
                    st.success("‚úÖ –î–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
                    st.rerun()
                else:
                    st.session_state["confirm_clear"] = True
                    st.warning("‚ö†Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–µ —Ä–∞–∑ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")

