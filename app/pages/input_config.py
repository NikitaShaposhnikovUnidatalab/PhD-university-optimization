import math
import streamlit as st
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.state import init_state_obj, init_state_value, QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU

st.set_page_config(
    page_title="QS Ranking Configurator", 
    page_icon="‚öôÔ∏è", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ QS —Ä–µ–π—Ç–∏–Ω–≥—É")
st.markdown("**–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, –≤–∞–≥–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –Ω–∞ 2026 —Ä—ñ–∫**")

print("‚öôÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

init_state_obj("QS_INPUT", QS_INPUT)
init_state_obj("QS_WEIGHTS", QS_WEIGHTS)
init_state_obj("QS_MAX", QS_MAX)
init_state_obj("QS_DELTA", QS_DELTA)
init_state_obj("QS_COST", QS_COST)
init_state_value("MAX_RU", MAX_RU)

st.markdown("---")
st.subheader("üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç")
st.markdown("**–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —Ä–µ—Å—É—Ä—Å—ñ–≤ (RU) –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**")

col1, col2 = st.columns([1, 2])
with col1:
    new_budget = st.number_input(
        "–ë—é–¥–∂–µ—Ç (RU):",
        value=float(st.session_state["MAX_RU"]),
        step=10.0,
        min_value=0.0,
        help="–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —Ä–µ—Å—É—Ä—Å—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤",
        key="max_ru_input",
    )
    if new_budget != st.session_state["MAX_RU"]:
        print(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –±—é–¥–∂–µ—Ç –∑ {st.session_state['MAX_RU']} –Ω–∞ {new_budget} RU")
        st.session_state["MAX_RU"] = new_budget

with col2:
    st.metric("–ü–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç", f"{st.session_state['MAX_RU']:,} RU")
    if st.session_state["MAX_RU"] > 0:
        st.success("‚úÖ –ë—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        st.warning("‚ö†Ô∏è –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –±—é–¥–∂–µ—Ç –±—ñ–ª—å—à–µ 0")

def get_cost_str(x) -> str:
    if isinstance(x, (float, int)) and math.isinf(float(x)):
        return "inf"
    return str(x)

def parse_cost_str(s: str, fallback):
    s = (s or "").strip().lower()
    if s in ("inf", "+inf", "infinity"):
        return float("inf")
    try:
        return float(s)
    except Exception:
        return fallback

tab1, tab2, tab3, tab4 = st.tabs([
    "üìä –ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (2025 —Ä—ñ–∫)",
    "‚öñÔ∏è –í–∞–≥–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (—Ñ–æ—Ä–º—É–ª–∞ QS score)",
    "üîº –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞ –æ–¥–∏–Ω —Ä—ñ–∫ (Delta)",
    "üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (Cost)"
])

indicator_descriptions = {
    "AR": "Academic Reputation - –†–µ–ø—É—Ç–∞—Ü—ñ—è –≤ –∞–∫–∞–¥–µ–º—ñ—á–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ",
    "ER": "Employer Reputation - –†–µ–ø—É—Ç–∞—Ü—ñ—è —Å–µ—Ä–µ–¥ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤", 
    "FSR": "Faculty Student Ratio - –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤",
    "CPF": "Citations per Faculty - –¶–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–∏–∫–ª–∞–¥–∞—á–∞",
    "IFR": "International Faculty Ratio - –ß–∞—Å—Ç–∫–∞ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤",
    "ISR": "International Student Ratio - –ß–∞—Å—Ç–∫–∞ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤",
    "IRN": "International Research Network - –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–∞ –º–µ—Ä–µ–∂–∞",
    "EO": "Employment Outcomes - –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
    "SUS": "Sustainability - –°—Ç–∞–ª—ñ—Å—Ç—å —Ä–æ–∑–≤–∏—Ç–∫—É"
}

with tab1:
    st.markdown("**–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ QS —Ä–µ–π—Ç–∏–Ω–≥—É**")
    
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_INPUT.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            new_value = st.number_input(
                f"**{k}** - {indicator_descriptions.get(k, k)}",
                value=float(st.session_state["QS_INPUT"][k]),
                step=0.1,
                min_value=0.0,
                format="%.2f",
                help=indicator_descriptions.get(k, f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k}"),
                key=f"input_{k}",
            )
            if round(new_value, 2) != st.session_state["QS_INPUT"][k]:
                print(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –ø–æ–∫–∞–∑–Ω–∏–∫ {k} –∑ {st.session_state['QS_INPUT'][k]} –Ω–∞ {round(new_value, 2)}")
                st.session_state["QS_INPUT"][k] = round(new_value, 2)

with tab2:
    st.markdown("**–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ (—Å—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 1.0)**")
    
    current_sum = sum(float(st.session_state["QS_WEIGHTS"][k]) for k in QS_WEIGHTS.keys())
    st.info(f"**–ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞ –≤–∞–≥: {current_sum:.2f}** {'‚úÖ' if abs(current_sum - 1.0) < 0.01 else '‚ö†Ô∏è (–º–∞—î –±—É—Ç–∏ 1.0)'}")
    
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_WEIGHTS.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            new_weight = st.number_input(
                f"**{k}** - {indicator_descriptions.get(k, k)}",
                value=float(st.session_state["QS_WEIGHTS"][k]),
                step=0.01,
                min_value=0.0,
                max_value=1.0,
                format="%.3f",
                help=f"–í–∞–≥–∞ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} (0.0 - 1.0)",
                key=f"weight_{k}",
            )
            if round(new_weight, 3) != st.session_state["QS_WEIGHTS"][k]:
                print(f"‚öñÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤–∞–≥—É –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} –∑ {st.session_state['QS_WEIGHTS'][k]} –Ω–∞ {round(new_weight, 3)}")
                st.session_state["QS_WEIGHTS"][k] = round(new_weight, 3)

with tab3:
    st.markdown("**–í–∫–∞–∂—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –º–æ–∂–ª–∏–≤–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞**")
    
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_DELTA.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            new_delta = st.number_input(
                f"**{k}** - {indicator_descriptions.get(k, k)}",
                value=float(st.session_state["QS_DELTA"][k]),
                step=0.1,
                min_value=0.0,
                format="%.2f",
                help=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k}",
                key=f"delta_{k}",
            )
            if round(new_delta, 2) != st.session_state["QS_DELTA"][k]:
                print(f"üîº –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ delta –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} –∑ {st.session_state['QS_DELTA'][k]} –Ω–∞ {round(new_delta, 2)}")
                st.session_state["QS_DELTA"][k] = round(new_delta, 2)

with tab4:
    st.markdown("**–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ (–≤ RU). –í–≤–µ–¥—ñ—Ç—å 'inf' –¥–ª—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, —è–∫—ñ –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏**")
    
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_COST.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            current = st.session_state["QS_COST"][k]
            new_str = st.text_input(
                f"**{k}** - {indicator_descriptions.get(k, k)}",
                value="inf" if (isinstance(current, float) and math.isinf(current)) else str(int(current)),
                help=f"–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} (–≤ RU). –í–≤–µ–¥—ñ—Ç—å 'inf' —è–∫—â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏",
                key=f"cost_{k}",
            )
            new_cost = float("inf") if new_str.strip().lower() == "inf" else int(new_str)
            if new_cost != st.session_state["QS_COST"][k]:
                print(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} –∑ {st.session_state['QS_COST'][k]} –Ω–∞ {new_cost}")
                st.session_state["QS_COST"][k] = new_cost

st.markdown("---")
st.subheader("üìã –ü—ñ–¥—Å—É–º–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

col1, col2, col3 = st.columns(3)

with col1:
    budget = st.session_state["MAX_RU"]
    st.metric("–ë—é–¥–∂–µ—Ç", f"{budget:,} RU", delta=None)

with col2:
    weights_sum = sum(float(st.session_state["QS_WEIGHTS"][k]) for k in QS_WEIGHTS.keys())
    st.metric("–°—É–º–∞ –≤–∞–≥", f"{weights_sum:.3f}", delta=f"{weights_sum - 1.0:.3f}")

with col3:
    eligible_count = sum(1 for k in QS_INPUT.keys() if float(st.session_state["QS_DELTA"][k]) > 0 and float(st.session_state["QS_COST"][k]) != float("inf"))
    st.metric("–ü—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", eligible_count)

if abs(weights_sum - 1.0) > 0.01:
    st.warning("‚ö†Ô∏è **–°—É–º–∞ –≤–∞–≥ –Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î 1.0!** –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.")
if budget <= 0:
    st.error("‚ùå **–ë—é–¥–∂–µ—Ç –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!**")
if eligible_count < 2:
    st.warning("‚ö†Ô∏è **–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤!** –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.")

st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ", use_container_width=True):
        print("üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ' - –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
        st.json({
            "MAX_RU": st.session_state["MAX_RU"],
            "QS_INPUT": st.session_state["QS_INPUT"],
            "QS_WEIGHTS": st.session_state["QS_WEIGHTS"],
            "QS_DELTA": st.session_state["QS_DELTA"],
            "QS_COST": st.session_state["QS_COST"],
        })

with col2:
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é", type="primary", use_container_width=True):
        print("üöÄ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é' –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
        if budget > 0 and eligible_count >= 2:
            print(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ: –±—é–¥–∂–µ—Ç={budget}, –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤={eligible_count}")
            st.success("‚úÖ **–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...**")
            st.switch_page("pages/genetic_optimizer.py")
        else:
            print(f"‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞: –±—é–¥–∂–µ—Ç={budget}, –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤={eligible_count}")
            st.error("‚ùå **–í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó!**")

with col3:
    if st.button("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", use_container_width=True):
        print("üè† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ù–∞ –≥–æ–ª–æ–≤–Ω—É' - –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É")
        st.switch_page("main.py")

st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>‚öôÔ∏è QS Ranking Configurator | –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –Ω–∞ 2026 —Ä—ñ–∫</p>
</div>
""", unsafe_allow_html=True)