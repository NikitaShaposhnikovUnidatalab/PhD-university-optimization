import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from itertools import combinations
import time
import sys
import os
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from top_n_optimizer import run_top_n_lp_optimization
from genetic_optimizer import compute_total_ru, save_experiment_to_session
from lp import optimize_qs_pulp

plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

st.set_page_config(
    page_title="QS Ranking Optimizer - Simple", 
    page_icon="üéØ", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ü—Ä–∏—Ö–æ–≤—É—î–º–æ sidebar –ø–æ–≤–Ω—ñ—Å—Ç—é
st.markdown("""
<style>
    [data-testid="stSidebar"] {
        display: none;
    }
    [data-testid="collapsedControl"] {
        display: none;
    }
</style>
""", unsafe_allow_html=True)

st.title("üéØ QS Ranking Optimizer (Simple)")
st.markdown("**–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ä–µ–π—Ç–∏–Ω–≥—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è**")
st.markdown("üìÖ **–¶—ñ–ª—å:** –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è QS —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞ 2026 —Ä—ñ–∫ –≤ –º–µ–∂–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É")

print("üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (Simple)")
print(f"üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó: {list(st.session_state.keys())}")


required_keys = ["QS_INPUT", "QS_WEIGHTS", "QS_MAX", "QS_DELTA", "QS_COST", "MAX_RU"]

if not all(k in st.session_state for k in required_keys):
    st.error("‚ùå **–î–∞–Ω—ñ —â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ñ!**")
    st.markdown("""
    **–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É:**
    1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É **"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"** (—É –º–µ–Ω—é –∑–ª—ñ–≤–∞)
    2. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, –≤–∞–≥–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è
    3. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    """)
    st.stop()
    
QS_INPUT = st.session_state["QS_INPUT"]
QS_WEIGHTS = st.session_state["QS_WEIGHTS"]
QS_MAX = st.session_state["QS_MAX"]
QS_DELTA = st.session_state["QS_DELTA"]
QS_COST = st.session_state["QS_COST"]
MAX_RU = st.session_state["MAX_RU"]

st.markdown("---")
st.subheader("üìã –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–ë—é–¥–∂–µ—Ç RU", f"{MAX_RU:,}")
with col2:
    eligible_count = sum(1 for k in QS_INPUT.keys() if float(QS_DELTA.get(k, 0.0)) > 0 and float(QS_COST.get(k, 0.0)) != float("inf"))
    st.metric("–ü—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", eligible_count)
with col3:
    current_qs = sum(float(QS_INPUT[k]) * float(QS_WEIGHTS[k]) for k in QS_INPUT.keys())
    st.metric("–ü–æ—Ç–æ—á–Ω–∏–π QS Score", f"{current_qs:.2f}")

st.markdown("---")

tab1, tab2, tab3, tab4 = st.tabs([
    "üìä –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", 
    "üéØ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", 
    "üèÜ –¢–æ–ø 3-5 –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤",
    "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤"
])

with tab1:
    st.subheader("üìä –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (LP)")
    st.markdown("**–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.")
    st.markdown("""
    - ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–ø—Ç–∏–º—É–º
    - ‚úÖ –®–≤–∏–¥–∫–æ —Ç–∞ —Ç–æ—á–Ω–æ
    - ‚úÖ –û–ø—Ç–∏–º—ñ–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    """)

    if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é", type="primary", use_container_width=True):
        print("üßÆ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (Simple)")
        selected = [k for k, d in QS_DELTA.items() if float(d) > 0]
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –±—é–¥–∂–µ—Ç={MAX_RU}, –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤={len(selected)}")
        start_time = time.time()
        x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
            QS_INPUT=QS_INPUT,
            QS_WEIGHTS=QS_WEIGHTS,
            QS_MAX=QS_MAX,
            QS_DELTA=QS_DELTA,
            QS_COST=QS_COST,
            MAX_RU=MAX_RU,
            selected_indicators=selected,
        )

        deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
        ru_used = sum(
            (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
            for k in QS_INPUT.keys()
        )

        st.success("‚úÖ **LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
        elapsed_time_lp_full = time.time() - start_time
        print(f"‚úÖ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time_lp_full:.1f}—Å, QS Score: {qs_score_lp:.2f}")
        
        experiment = save_experiment_to_session(
            algorithm="LP",
            current_qs=current_qs,
            qs_score=float(qs_score_lp),
            ru_used=ru_used,
            execution_time=elapsed_time_lp_full,
            solution_details={"solution": x_2026, "algorithm": "LP"},
            comparison_metrics={
                "improvement": float(qs_score_lp) - current_qs,
                "improvement_percent": ((float(qs_score_lp) - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                "efficiency": (float(qs_score_lp) - current_qs) / ru_used if ru_used > 0 else 0,
                "budget_utilization": ru_used / MAX_RU if MAX_RU > 0 else 0,
                "current_qs": current_qs
            },
            QS_INPUT=QS_INPUT,
            solution=[float(x_2026[k]) for k in QS_INPUT.keys()]
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
        st.session_state["last_lp_experiment"] = experiment
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.metric("QS Score (LP)", f"{qs_score_lp:.2f}", delta=f"{qs_score_lp - current_qs:.2f}")
        with col2:
            st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{ru_used:.0f}", delta=f"{ru_used - MAX_RU:.0f}")
        with col3:
            efficiency = (qs_score_lp - current_qs) / ru_used if ru_used > 0 else 0
            st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
        with col4:
            improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
            st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")
        with col5:
            st.metric("–ß–∞—Å –æ–±—á–∏—Å–ª–µ–Ω–Ω—è", f"{elapsed_time_lp_full:.1f}—Å")
        
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        st.dataframe(df_lp, use_container_width=True)
        
        st.subheader("üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ LP")
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        
        indicators = list(QS_INPUT.keys())
        values_2025 = [float(QS_INPUT[k]) for k in indicators]
        values_2026 = [float(x_2026[k]) for k in indicators]
        
        x_pos = np.arange(len(indicators))
        width = 0.35
        
        bars1 = ax1.bar(x_pos - width/2, values_2025, width, label='2025', color='#2E86AB', alpha=0.8)
        bars2 = ax1.bar(x_pos + width/2, values_2026, width, label='2026 (LP)', color='#E63946', alpha=0.8)
        
        ax1.set_xlabel('–ü–æ–∫–∞–∑–Ω–∏–∫–∏', fontsize=12, fontweight='bold')
        ax1.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è', fontsize=12, fontweight='bold')
        ax1.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: 2025 vs 2026 (LP)', fontsize=14, fontweight='bold', pad=20)
        ax1.set_xticks(x_pos)
        ax1.set_xticklabels(indicators, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        for bar in bars1:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{height:.1f}', ha='center', va='bottom', fontsize=9)
        for bar in bars2:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{height:.1f}', ha='center', va='bottom', fontsize=9)
        
        improvements = [values_2026[i] - values_2025[i] for i in range(len(indicators))]
        colors = ['#2ECC71' if imp > 0 else '#E74C3C' for imp in improvements]
        
        bars = ax2.bar(indicators, improvements, color=colors, alpha=0.8)
        ax2.set_xlabel('–ü–æ–∫–∞–∑–Ω–∏–∫–∏', fontsize=12, fontweight='bold')
        ax2.set_ylabel('–ü—Ä–∏—Ä—ñ—Å—Ç', fontsize=12, fontweight='bold')
        ax2.set_title('–ü—Ä–∏—Ä—ñ—Å—Ç –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (LP)', fontsize=14, fontweight='bold', pad=20)
        ax2.tick_params(axis='x', rotation=45)
        ax2.grid(True, alpha=0.3)
        
        for bar, imp in zip(bars, improvements):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + (0.1 if height >= 0 else -0.3),
                    f'{imp:.2f}', ha='center', va='bottom' if height >= 0 else 'top', fontsize=9)
        
        costs = []
        efficiencies = []
        for k in indicators:
            delta = float(x_2026[k]) - float(QS_INPUT[k])
            if QS_COST[k] < float("inf") and delta > 0:
                cost = float(QS_COST[k]) * delta
                efficiency = delta / cost if cost > 0 else 0
            else:
                cost = 0
                efficiency = 0
            costs.append(cost)
            efficiencies.append(efficiency)
        
        non_zero_indices = [i for i, cost in enumerate(costs) if cost > 0]
        if non_zero_indices:
            filtered_indicators = [indicators[i] for i in non_zero_indices]
            filtered_efficiencies = [efficiencies[i] for i in non_zero_indices]
            filtered_costs = [costs[i] for i in non_zero_indices]
            
            scatter = ax3.scatter(filtered_costs, filtered_efficiencies, 
                                c=filtered_efficiencies, cmap='viridis', s=100, alpha=0.7)
            ax3.set_xlabel('–í–∏—Ç—Ä–∞—Ç–∏ RU', fontsize=12, fontweight='bold')
            ax3.set_ylabel('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–ø—Ä–∏—Ä—ñ—Å—Ç/–≤–∏—Ç—Ä–∞—Ç–∏)', fontsize=12, fontweight='bold')
            ax3.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
            ax3.grid(True, alpha=0.3)
            
            for i, (cost, eff, ind) in enumerate(zip(filtered_costs, filtered_efficiencies, filtered_indicators)):
                ax3.annotate(ind, (cost, eff), xytext=(5, 5), textcoords='offset points', fontsize=9)
            
            cbar = plt.colorbar(scatter, ax=ax3)
            cbar.set_label('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', fontsize=11, fontweight='bold')
        else:
            ax3.text(0.5, 0.5, '–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç RU', ha='center', va='center', transform=ax3.transAxes, fontsize=12)
            ax3.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
        
        if any(cost > 0 for cost in costs):
            non_zero_costs = [costs[i] for i in range(len(costs)) if costs[i] > 0]
            non_zero_indicators = [indicators[i] for i in range(len(costs)) if costs[i] > 0]
            
            wedges, texts, autotexts = ax4.pie(non_zero_costs, labels=non_zero_indicators, autopct='%1.1f%%', 
                                              startangle=90, colors=plt.cm.Set3(np.linspace(0, 1, len(non_zero_costs))))
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç RU –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
            
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
        else:
            ax4.text(0.5, 0.5, '–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç RU', ha='center', va='center', transform=ax4.transAxes, fontsize=12)
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç RU –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞—Ö (LP)', fontsize=14, fontweight='bold', pad=20)
        
        plt.tight_layout()
        st.pyplot(fig)
        plt.clf()
    
    # AI –ê–Ω–∞–ª—ñ–∑ —Å–µ–∫—Ü—ñ—è
    st.markdown("---")
    st.subheader("ü§ñ AI –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
    
    if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (LP)", type="primary", use_container_width=True):
        print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó..."):
            try:
                import sys
                from pathlib import Path
                sys.path.insert(0, str(Path(__file__).parent.parent))
                from llm import generate_qs_insights
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                if "last_lp_experiment" in st.session_state:
                    experiment = st.session_state["last_lp_experiment"]
                    insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                    st.session_state["last_insights_lp"] = insights_result
                    st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ LP –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                else:
                    st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö LP –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É**")
                    st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é")
                
            except Exception as e:
                st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏
    if "last_insights_lp" in st.session_state:
        insights = st.session_state["last_insights_lp"]
        
        if insights["status"] == "success":
            st.subheader("üí° AI –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (LP)")
            st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                
        elif insights["status"] == "no_api":
            st.error("‚ùå **API –∫–ª—é—á Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
            st.info("üí° –î–æ–¥–∞–π—Ç–µ GOOGLE_API_KEY –≤ —Ñ–∞–π–ª .env")
        elif insights["status"] == "error":
            st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        elif insights["status"] == "empty":
            st.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM")

with tab2:
    st.subheader("üéØ –í–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (LP)")
    st.markdown("""
    **–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –î–æ–∑–≤–æ–ª—è—î –≤–∞–º –≤—Ä—É—á–Ω—É –æ–±—Ä–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.
    - ‚úÖ –ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ç–∏–º, —â–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏
    - ‚úÖ –ú–æ–∂–Ω–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
    - ‚úÖ –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    """)

    all_keys = list(QS_INPUT.keys())
    default_selected = [k for k in all_keys if float(QS_DELTA.get(k, 0.0)) > 0]
    if "SELECTED_INDICATORS" not in st.session_state:
        st.session_state["SELECTED_INDICATORS"] = default_selected

    new_selection = st.multiselect(
        "üîç –û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:",
        options=all_keys,
        default=st.session_state["SELECTED_INDICATORS"],
        key="SELECTED_INDICATORS",
        help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó. –Ü–Ω—à—ñ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏."
    )
    selected_keys = list(new_selection) or []
    
    if set(selected_keys) != set(st.session_state.get("SELECTED_INDICATORS", [])):
        print(f"üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {selected_keys}")
        st.session_state["SELECTED_INDICATORS"] = selected_keys

    if not selected_keys:
        st.warning("‚ö†Ô∏è **–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó!**")
    else:
        st.info(f"üìä **–û–±—Ä–∞–Ω–æ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤:** {len(selected_keys)} –∑ {len(all_keys)}")
        
        if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ LP (–æ–±—Ä–∞–Ω—ñ)", type="primary", use_container_width=True):
            print(f"üßÆ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {selected_keys}")
            start_time = time.time()
            x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
                QS_INPUT=QS_INPUT,
                QS_WEIGHTS=QS_WEIGHTS,
                QS_MAX=QS_MAX,
                QS_DELTA=QS_DELTA,
                QS_COST=QS_COST,
                MAX_RU=MAX_RU,
                selected_indicators=selected_keys,
            )
            print(f"‚úÖ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, QS Score: {qs_score_lp:.2f}")

            deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
            ru_used = sum(
                (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
                for k in QS_INPUT.keys()
            )
            
            experiment = save_experiment_to_session(
                algorithm="LP_Selected",
                current_qs=current_qs,
                qs_score=float(qs_score_lp),
                ru_used=ru_used,
                execution_time=time.time() - start_time,
                solution_details={"solution": x_2026, "algorithm": "LP"},
                comparison_metrics={
                    "improvement": float(qs_score_lp) - current_qs,
                    "improvement_percent": ((float(qs_score_lp) - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                    "efficiency": (float(qs_score_lp) - current_qs) / ru_used if ru_used > 0 else 0,
                    "budget_utilization": ru_used / MAX_RU if MAX_RU > 0 else 0,
                    "current_qs": current_qs
                },
                QS_INPUT=QS_INPUT,
                solution=[float(x_2026[k]) for k in QS_INPUT.keys()]
            )

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
            st.session_state["last_lp_selected_experiment"] = experiment

            st.success("‚úÖ **LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("QS Score (LP)", f"{qs_score_lp:.2f}", delta=f"{qs_score_lp - current_qs:.2f}")
            with col2:
                st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{ru_used:.0f}", delta=f"{ru_used - MAX_RU:.0f}")
            with col3:
                efficiency = (qs_score_lp - current_qs) / ru_used if ru_used > 0 else 0
                st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
            with col4:
                improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
                st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–æ–±—Ä–∞–Ω—ñ)")
            st.dataframe(df_lp, use_container_width=True)

    # AI –ê–Ω–∞–ª—ñ–∑ —Å–µ–∫—Ü—ñ—è –¥–ª—è —Ç–∞–±—É 2
    st.markdown("---")
    st.subheader("ü§ñ AI –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–æ–±—Ä–∞–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏)")
    
    if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (LP –æ–±—Ä–∞–Ω—ñ)", type="primary", use_container_width=True):
        print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
        with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤..."):
            try:
                import sys
                from pathlib import Path
                sys.path.insert(0, str(Path(__file__).parent.parent))
                from llm import generate_qs_insights
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                if "last_lp_selected_experiment" in st.session_state:
                    experiment = st.session_state["last_lp_selected_experiment"]
                    insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                    st.session_state["last_insights_lp_selected"] = insights_result
                    st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ LP (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                else:
                    st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö LP –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**")
                    st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
                
            except Exception as e:
                st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏
    if "last_insights_lp_selected" in st.session_state:
        insights = st.session_state["last_insights_lp_selected"]
        
        if insights["status"] == "success":
            st.subheader("üí° AI –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (LP –æ–±—Ä–∞–Ω—ñ)")
            st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                
        elif insights["status"] == "no_api":
            st.error("‚ùå **API –∫–ª—é—á Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
            st.info("üí° –î–æ–¥–∞–π—Ç–µ GOOGLE_API_KEY –≤ —Ñ–∞–π–ª .env")
        elif insights["status"] == "error":
            st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        elif insights["status"] == "empty":
            st.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM")

with tab3:
    st.subheader("üèÜ –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π (LP)")
    st.markdown("""
    **–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∑ N –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.
    - üîç –ü–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
    - üèÜ –ü–æ–∫–∞–∑—É—î —Ç–æ–ø-3 –Ω–∞–π–∫—Ä–∞—â—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
    - üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
    - ‚ö° –®–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è
    """)

    def get_eligible_indicators():
        eligible = []
        for key in QS_INPUT.keys():
            if (float(QS_DELTA.get(key, 0.0)) > 0.0 and 
                float(QS_COST.get(key, 0.0)) != float("inf")):
                eligible.append(key)
        return eligible

    eligible = get_eligible_indicators()

    if len(eligible) < 2:
        st.error("‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è!**")
        st.markdown(f"""
        **–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑:**
        - Delta > 0 (–º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏)
        - –°–∫—ñ–Ω—á–µ–Ω–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å (–Ω–µ ‚àû)
        
        **–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(eligible) if eligible else '–ù–µ–º–∞—î'}
        
        **–†—ñ—à–µ–Ω–Ω—è:** –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —ñ –∑–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.
        """)
    else:
        st.success(f"‚úÖ **–ó–Ω–∞–π–¥–µ–Ω–æ {len(eligible)} –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è**")
        st.markdown(f"**–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(eligible)}")
        
        st.markdown("**‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É:**")
        num_indicators = st.selectbox(
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:",
            options=list(range(2, min(len(eligible) + 1, 6))),
            index=1,
            help=f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {len(eligible)}",
            key="topn_num_indicators"
        )
        
        total_combinations = len(list(combinations(eligible, num_indicators)))
        st.info(f"üìä **–ë—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {total_combinations} –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**")
        
        if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é (LP)", type="primary", use_container_width=True):
            print(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ —Ç–æ–ø-N LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é: {num_indicators} –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑ {len(eligible)} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö")
            run_top_n_lp_optimization(eligible, num_indicators, QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU, current_qs)

    # AI –ê–Ω–∞–ª—ñ–∑ —Å–µ–∫—Ü—ñ—è –¥–ª—è —Ç–∞–±—É 3
    st.markdown("---")
    st.subheader("ü§ñ AI –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (—Ç–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó)")
    
    if st.button("üß† –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI —ñ–Ω—Å–∞–π—Ç (LP —Ç–æ–ø-N)", type="primary", use_container_width=True):
        print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LP —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        with st.spinner("ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç LP —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó..."):
            try:
                import sys
                from pathlib import Path
                sys.path.insert(0, str(Path(__file__).parent.parent))
                from llm import generate_qs_insights
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                if "last_lp_topn_experiment" in st.session_state:
                    experiment = st.session_state["last_lp_topn_experiment"]
                    insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                    st.session_state["last_insights_lp_topn"] = insights_result
                    st.success("‚úÖ **AI –∞–Ω–∞–ª—ñ–∑ LP (—Ç–æ–ø-N) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
                else:
                    st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö LP –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É —Ç–æ–ø-N**")
                    st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å LP —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é")
                
            except Exception as e:
                st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:** {str(e)}")
                st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ Google Gemini")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏
    if "last_insights_lp_topn" in st.session_state:
        insights = st.session_state["last_insights_lp_topn"]
        
        if insights["status"] == "success":
            st.subheader("üí° AI –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (LP —Ç–æ–ø-N)")
            st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                
        elif insights["status"] == "no_api":
            st.error("‚ùå **API –∫–ª—é—á Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
            st.info("üí° –î–æ–¥–∞–π—Ç–µ GOOGLE_API_KEY –≤ —Ñ–∞–π–ª .env")
        elif insights["status"] == "error":
            st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        elif insights["status"] == "empty":
            st.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM")