# pages/2_genetic_optimizer.py
import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from itertools import combinations
import time
from genetic_optimizer import run_optimization, plot_progress, get_top_solutions, compute_total_ru
from lp import optimize_qs_pulp

# Set consistent style for all plots
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

st.set_page_config(
    page_title="QS Ranking Optimizer", 
    page_icon="üéØ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üéØ QS Ranking Optimizer")
st.markdown("**–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ä–µ–π—Ç–∏–Ω–≥—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≥–µ–Ω–µ—Ç–∏—á–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤**")
st.markdown("üìÖ **–¶—ñ–ª—å:** –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è QS —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞ 2026 —Ä—ñ–∫ –≤ –º–µ–∂–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É")

# Add info boxes
col1, col2, col3 = st.columns(3)
with col1:
    st.info("üìä **–í—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏**\n\n–û–ø—Ç–∏–º—ñ–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ")
with col2:
    st.info("üéØ **–í–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
with col3:
    st.info("üèÜ **–¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π**\n\n–°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–π–¥–µ –Ω–∞–π–∫—Ä–∞—â—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ")


required_keys = ["QS_INPUT", "QS_WEIGHTS", "QS_MAX", "QS_DELTA", "QS_COST", "MAX_RU"]

if not all(k in st.session_state for k in required_keys):
    st.error("‚ùå **–î–∞–Ω—ñ —â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ñ!**")
    st.markdown("""
    **–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É:**
    1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É **"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"** (—É –º–µ–Ω—é –∑–ª—ñ–≤–∞)
    2. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, –≤–∞–≥–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è
    3. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    """)
    st.stop()
    
QS_INPUT = st.session_state["QS_INPUT"]
QS_WEIGHTS = st.session_state["QS_WEIGHTS"]
QS_MAX = st.session_state["QS_MAX"]
QS_DELTA = st.session_state["QS_DELTA"]
QS_COST = st.session_state["QS_COST"]
MAX_RU = st.session_state["MAX_RU"]

# Display current data summary
st.markdown("---")
st.subheader("üìã –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–ë—é–¥–∂–µ—Ç RU", f"{MAX_RU:,}")
with col2:
    eligible_count = sum(1 for k in QS_INPUT.keys() if float(QS_DELTA.get(k, 0.0)) > 0 and float(QS_COST.get(k, 0.0)) != float("inf"))
    st.metric("–ü—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", eligible_count)
with col3:
    current_qs = sum(float(QS_INPUT[k]) * float(QS_WEIGHTS[k]) for k in QS_INPUT.keys())
    st.metric("–ü–æ—Ç–æ—á–Ω–∏–π QS Score", f"{current_qs:.2f}")

st.markdown("---")
st.subheader("üìä –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
st.markdown("**–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –û–ø—Ç–∏–º—ñ–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π QS Score –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É.")

if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é", type="primary", use_container_width=True):
    ga = run_optimization(QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU)
    solution, qs_score, _ = ga.best_solution()
    result = dict(zip(QS_INPUT.keys(), solution))

    total_ru = compute_total_ru(QS_INPUT, QS_COST, solution)

    # Results summary
    st.success("‚úÖ **–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("QS Score", f"{qs_score:.2f}", delta=f"{qs_score - current_qs:.2f}")
    with col2:
        st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{total_ru:.0f}", delta=f"{total_ru - MAX_RU:.0f}")
    with col3:
        efficiency = (qs_score - current_qs) / total_ru if total_ru > 0 else 0
        st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}", help="QS Score –Ω–∞ –æ–¥–∏–Ω–∏—Ü—é RU")
    with col4:
        improvement = ((qs_score - current_qs) / current_qs * 100) if current_qs > 0 else 0
        st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")
    
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")

    result_df = pd.DataFrame({
        "–ü–æ–∫–∞–∑–Ω–∏–∫": list(QS_INPUT.keys()),
        "2025": list(QS_INPUT.values()),
        "2026 (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)": solution,
        "–ü—Ä–∏—Ä—ñ—Å—Ç": [solution[i] - list(QS_INPUT.values())[i] for i in range(len(QS_INPUT))]
    })
    st.dataframe(result_df, use_container_width=True)
    
    st.subheader("üìà –î–∏–Ω–∞–º—ñ–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è QS Score")
    plot_progress(ga)
    st.pyplot(plt)
    plt.clf()

    top_df, contrib_df = get_top_solutions(ga, QS_INPUT, QS_COST, QS_WEIGHTS, top_n=10)
    
    print(contrib_df)
    st.subheader("üèÜ –¢–æ–ø-10 —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π (—Ç–∞–±–ª–∏—Ü—è)")
    st.dataframe(top_df, use_container_width=True)

    
    st.subheader("üî• Heatmap —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π")
    delta_df = top_df.set_index("#")[list(QS_INPUT.keys())] - pd.Series(QS_INPUT)
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(delta_df, cmap="RdYlGn", annot=True, fmt=".2f", ax=ax, 
                cbar_kws={'label': '–ó–º—ñ–Ω–∞ –ø–æ–∫–∞–∑–Ω–∏–∫–∞'})
    ax.set_title("–ó–º—ñ–Ω–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —É —Ç–æ–ø-10 —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö", fontsize=14, fontweight='bold', pad=20)
    ax.set_xlabel("–ü–æ–∫–∞–∑–Ω–∏–∫–∏", fontsize=12, fontweight='bold')
    ax.set_ylabel("–°—Ç—Ä–∞—Ç–µ–≥—ñ—è", fontsize=12, fontweight='bold')
    plt.tight_layout()
    st.pyplot(fig)
    
    st.subheader("üî• Heatmap —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞)")
    delta_df = top_df.set_index("#")[list(QS_INPUT.keys())] - pd.Series(QS_INPUT)
    norm_df = delta_df.copy()
    for col in norm_df.columns:
        max_delta = norm_df[col].max()
        if max_delta > 0:
            norm_df[col] = norm_df[col] / max_delta
        else:
            norm_df[col] = 0.0

    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(norm_df, cmap="RdYlGn", annot=True, fmt=".2f", ax=ax,
                cbar_kws={'label': '–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞'})
    ax.set_title("–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∑–º—ñ–Ω–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —É —Ç–æ–ø-10 —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö", fontsize=14, fontweight='bold', pad=20)
    ax.set_xlabel("–ü–æ–∫–∞–∑–Ω–∏–∫–∏", fontsize=12, fontweight='bold')
    ax.set_ylabel("–°—Ç—Ä–∞—Ç–µ–≥—ñ—è", fontsize=12, fontweight='bold')
    plt.tight_layout()
    st.pyplot(fig)


st.markdown("---")
st.subheader("üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (LP)")
st.markdown("""
**–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.
- ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–ø—Ç–∏–º—É–º
- ‚úÖ –®–≤–∏–¥—à–µ –∑–∞ –≥–µ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
- ‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω–∏–º–∏ –∫—Ä–æ–∫–∞–º–∏ 0.1
""")

if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é", use_container_width=True):
    selected = [k for k, d in QS_DELTA.items() if float(d) > 0]
    x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
        QS_INPUT=QS_INPUT,
        QS_WEIGHTS=QS_WEIGHTS,
        QS_MAX=QS_MAX,
        QS_DELTA=QS_DELTA,
        QS_COST=QS_COST,
        MAX_RU=MAX_RU,
        selected_indicators=selected,
    )

    deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
    ru_used = sum(
        (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
        for k in QS_INPUT.keys()
    )

    st.success("‚úÖ **LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("QS Score (LP)", f"{qs_score_lp:.2f}", delta=f"{qs_score_lp - current_qs:.2f}")
    with col2:
        st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{ru_used:.0f}", delta=f"{ru_used - MAX_RU:.0f}")
    with col3:
        efficiency = (qs_score_lp - current_qs) / ru_used if ru_used > 0 else 0
        st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
    with col4:
        improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
        st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")
    
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    st.dataframe(df_lp, use_container_width=True)


st.markdown("---")
st.subheader("üéØ –í–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
st.markdown("""
**–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –î–æ–∑–≤–æ–ª—è—î –≤–∞–º –≤—Ä—É—á–Ω—É –æ–±—Ä–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.
- ‚úÖ –ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ç–∏–º, —â–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏
- ‚úÖ –ú–æ–∂–Ω–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
- ‚úÖ –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
""")

# Manual indicator selection
all_keys = list(QS_INPUT.keys())
default_selected = [k for k in all_keys if float(QS_DELTA.get(k, 0.0)) > 0]
if "SELECTED_INDICATORS" not in st.session_state:
    st.session_state["SELECTED_INDICATORS"] = default_selected

st.multiselect(
    "üîç –û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:",
    options=all_keys,
    default=st.session_state["SELECTED_INDICATORS"],
    key="SELECTED_INDICATORS",
    help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó. –Ü–Ω—à—ñ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏."
)
selected_keys = list(st.session_state["SELECTED_INDICATORS"]) or []

if not selected_keys:
    st.warning("‚ö†Ô∏è **–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó!**")
else:
    st.info(f"üìä **–û–±—Ä–∞–Ω–æ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤:** {len(selected_keys)} –∑ {len(all_keys)}")
    
    cols = st.columns(2)
    with cols[0]:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ GA (–æ–±—Ä–∞–Ω—ñ)", key="ga_selected", type="primary", use_container_width=True):
            effective_delta = {k: (float(QS_DELTA[k]) if k in selected_keys else 0.0) for k in all_keys}
            ga = run_optimization(QS_INPUT, QS_WEIGHTS, QS_MAX, effective_delta, QS_COST, MAX_RU)
            solution, qs_score, _ = ga.best_solution()

            total_ru = compute_total_ru(QS_INPUT, QS_COST, solution)

            st.success("‚úÖ **GA-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("QS Score", f"{qs_score:.2f}", delta=f"{qs_score - current_qs:.2f}")
            with col2:
                st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{total_ru:.0f}", delta=f"{total_ru - MAX_RU:.0f}")
            with col3:
                efficiency = (qs_score - current_qs) / total_ru if total_ru > 0 else 0
                st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
            with col4:
                improvement = ((qs_score - current_qs) / current_qs * 100) if current_qs > 0 else 0
                st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")

            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (GA, –æ–±—Ä–∞–Ω—ñ)")
            result_df = pd.DataFrame({
                "–ü–æ–∫–∞–∑–Ω–∏–∫": list(QS_INPUT.keys()),
                "2025": list(QS_INPUT.values()),
                "2026 (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)": solution,
                "–ü—Ä–∏—Ä—ñ—Å—Ç": [solution[i] - list(QS_INPUT.values())[i] for i in range(len(QS_INPUT))]
            })
            st.dataframe(result_df, use_container_width=True)

    with cols[1]:
        if st.button("üßÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ LP (–æ–±—Ä–∞–Ω—ñ)", key="lp_selected", use_container_width=True):
            x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
                QS_INPUT=QS_INPUT,
                QS_WEIGHTS=QS_WEIGHTS,
                QS_MAX=QS_MAX,
                QS_DELTA=QS_DELTA,
                QS_COST=QS_COST,
                MAX_RU=MAX_RU,
                selected_indicators=selected_keys,
            )

            deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
            ru_used = sum(
                (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
                for k in QS_INPUT.keys()
            )

            st.success("‚úÖ **LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è (–æ–±—Ä–∞–Ω—ñ) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("QS Score (LP)", f"{qs_score_lp:.2f}", delta=f"{qs_score_lp - current_qs:.2f}")
            with col2:
                st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{ru_used:.0f}", delta=f"{ru_used - MAX_RU:.0f}")
            with col3:
                efficiency = (qs_score_lp - current_qs) / ru_used if ru_used > 0 else 0
                st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
            with col4:
                improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
                st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–æ–±—Ä–∞–Ω—ñ)")
            st.dataframe(df_lp, use_container_width=True)

st.markdown("---")
st.subheader("üèÜ –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π")
st.markdown("""
**–©–æ —Ü–µ —Ä–æ–±–∏—Ç—å:** –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∑ N –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.
- üîç –ü–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
- üèÜ –ü–æ–∫–∞–∑—É—î —Ç–æ–ø-3 –Ω–∞–π–∫—Ä–∞—â—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
- üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
- ‚ö° –®–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è
""")

# Get eligible indicators
def get_eligible_indicators():
    eligible = []
    for key in QS_INPUT.keys():
        if (float(QS_DELTA.get(key, 0.0)) > 0.0 and 
            float(QS_COST.get(key, 0.0)) != float("inf")):
            eligible.append(key)
    return eligible

eligible = get_eligible_indicators()

if len(eligible) < 2:
    st.error("‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è!**")
    st.markdown(f"""
    **–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑:**
    - Delta > 0 (–º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏)
    - –°–∫—ñ–Ω—á–µ–Ω–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å (–Ω–µ ‚àû)
    
    **–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(eligible) if eligible else '–ù–µ–º–∞—î'}
    
    **–†—ñ—à–µ–Ω–Ω—è:** –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —ñ –∑–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.
    """)
else:
    st.success(f"‚úÖ **–ó–Ω–∞–π–¥–µ–Ω–æ {len(eligible)} –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è**")
    st.markdown(f"**–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(eligible)}")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É:**")
        num_indicators = st.selectbox(
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:",
            options=list(range(2, min(len(eligible) + 1, 6))),
            index=1,  # Default to 3
            help=f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {len(eligible)}",
            key="topn_num_indicators"
        )
        
        # GA Parameters for top-N
        num_generations = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–æ–ª—ñ–Ω—å:", 100, 500, 200, key="topn_generations", help="–ë—ñ–ª—å—à–µ –ø–æ–∫–æ–ª—ñ–Ω—å = –∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –∞–ª–µ –¥–æ–≤—à–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è")
        sol_per_pop = st.slider("–†–æ–∑–º—ñ—Ä –ø–æ–ø—É–ª—è—Ü—ñ—ó:", 20, 100, 48, key="topn_pop_size", help="–ë—ñ–ª—å—à–∞ –ø–æ–ø—É–ª—è—Ü—ñ—è = –±—ñ–ª—å—à–µ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É")
    
    with col2:
        st.markdown("**üîß –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É:**")
        num_parents_mating = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ç—å–∫—ñ–≤:", 10, 50, 20, key="topn_parents", help="–°–∫—ñ–ª—å–∫–∏ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Ä—ñ—à–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞—â–∞–¥–∫—ñ–≤")
        mutation_percent_genes = st.slider("–í—ñ–¥—Å–æ—Ç–æ–∫ –º—É—Ç–∞—Ü—ñ–π:", 5, 50, 20, key="topn_mutations", help="–í—ñ–¥—Å–æ—Ç–æ–∫ –≥–µ–Ω—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å –∑–º—ñ–Ω–µ–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤–æ")
    
    # Calculate total combinations
    total_combinations = len(list(combinations(eligible, num_indicators)))
    st.info(f"üìä **–ë—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {total_combinations} –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤**")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é", type="primary", use_container_width=True):
        with st.spinner("–û–±—á–∏—Å–ª—é—é –Ω–∞–π–∫—Ä–∞—â—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó..."):
            start_time = time.time()
            
            # Run optimization for all combinations
            results = []
            all_keys = list(QS_INPUT.keys())
            
            # Progress bar
            total_combinations = len(list(combinations(eligible, num_indicators)))
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, combo in enumerate(combinations(eligible, num_indicators)):
                status_text.text(f"–û–±—Ä–æ–±–ª—è—é –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é {i+1}/{total_combinations}: {combo}")
                
                # Freeze all except selected indicators
                target_keys = set(combo)
                frozen_delta = {k: (float(QS_DELTA[k]) if k in target_keys else 0.0) for k in all_keys}
                
                ga = run_optimization(
                    QS_INPUT,
                    QS_WEIGHTS,
                    QS_MAX,
                    frozen_delta,
                    QS_COST,
                    MAX_RU,
                    num_generations=num_generations,
                    sol_per_pop=sol_per_pop,
                    num_parents_mating=num_parents_mating,
                    mutation_percent_genes=mutation_percent_genes,
                    stop_criteria="saturate_10",
                    random_seed=42,
                )
                
                solution, qs_score, _ = ga.best_solution()
                ru = compute_total_ru(QS_INPUT, QS_COST, solution)
                values = {k: float(solution[i]) for i, k in enumerate(all_keys)}
                
                results.append({
                    "combo": combo,
                    "qs_score": float(qs_score),
                    "ru": float(ru),
                    "solution": solution,
                    "values": values,
                })
                
                progress_bar.progress((i + 1) / total_combinations)
            
            # Sort results
            results_df = pd.DataFrame(results).sort_values(
                by=["qs_score", "ru"], 
                ascending=[False, True]
            ).reset_index(drop=True)
            
            elapsed_time = time.time() - start_time
            status_text.text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
            progress_bar.empty()
            
            # Display results
            st.success("‚úÖ **–¢–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
            st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–æ–ø-N –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            
            if not results_df.empty:
                best = results_df.iloc[0]
                
                # Best strategy
                st.subheader("üèÜ –ù–∞–π–∫—Ä–∞—â–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("QS Score", f"{best['qs_score']:.3f}", delta=f"{best['qs_score'] - current_qs:.3f}")
                with col2:
                    st.metric("–í–∏—Ç—Ä–∞—Ç–∏ RU", f"{best['ru']:.1f}", delta=f"{best['ru'] - MAX_RU:.1f}")
                with col3:
                    efficiency = (best['qs_score'] - current_qs) / best['ru'] if best['ru'] > 0 else 0
                    st.metric("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{efficiency:.3f}")
                with col4:
                    improvement = ((best['qs_score'] - current_qs) / current_qs * 100) if current_qs > 0 else 0
                    st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improvement:.1f}%")
                
                st.markdown(f"**üéØ –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** {', '.join(best['combo'])}")
                
                # Show detailed values
                st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó")
                comparison_data = []
                for key in all_keys:
                    comparison_data.append({
                        "–ü–æ–∫–∞–∑–Ω–∏–∫": key,
                        "–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è": QS_INPUT[key],
                        "–ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è": best['values'][key],
                        "–ó–º—ñ–Ω–∞": best['values'][key] - QS_INPUT[key],
                        "–í–Ω–µ—Å–æ–∫ —É QS": best['values'][key] * QS_WEIGHTS[key]
                    })
                
                comparison_df = pd.DataFrame(comparison_data)
                st.dataframe(comparison_df, use_container_width=True)
                
                # Top 3 strategies
                st.subheader("ü•á –¢–æ–ø-3 —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó")
                top3_df = results_df.head(3).copy()
                top3_df['–†–∞–Ω–≥'] = range(1, 4)
                top3_df['–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è'] = top3_df['combo'].apply(lambda x: ', '.join(x))
                
                display_cols = ['–†–∞–Ω–≥', '–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è', 'qs_score', 'ru']
                st.dataframe(top3_df[display_cols].rename(columns={
                    'qs_score': 'QS Score',
                    'ru': '–í–∏—Ç—Ä–∞—Ç–∏ RU'
                }), use_container_width=True)
                
                # Visualization
                st.subheader("üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
                
                # Bar chart of QS scores
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
                
                # Top 10 QS scores
                top10 = results_df.head(10)
                bars = ax1.bar(range(len(top10)), top10['qs_score'], color='#2E86AB', alpha=0.8)
                ax1.set_xlabel('–†–∞–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó', fontsize=12, fontweight='bold')
                ax1.set_ylabel('QS Score', fontsize=12, fontweight='bold')
                ax1.set_title('–¢–æ–ø-10 —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –∑–∞ QS Score', fontsize=14, fontweight='bold', pad=20)
                ax1.grid(True, alpha=0.3)
                
                # Highlight best strategy
                bars[0].set_color('#E63946')
                bars[0].set_alpha(1.0)
                
                # Resource usage vs QS Score
                scatter = ax2.scatter(results_df['ru'], results_df['qs_score'], 
                                    alpha=0.6, c=results_df['qs_score'], 
                                    cmap='viridis', s=50)
                ax2.set_xlabel('–í–∏—Ç—Ä–∞—Ç–∏ RU', fontsize=12, fontweight='bold')
                ax2.set_ylabel('QS Score', fontsize=12, fontweight='bold')
                ax2.set_title('–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å QS Score –≤—ñ–¥ –≤–∏—Ç—Ä–∞—Ç —Ä–µ—Å—É—Ä—Å—ñ–≤', fontsize=14, fontweight='bold', pad=20)
                ax2.grid(True, alpha=0.3)
                
                # Highlight best strategy
                ax2.scatter(best['ru'], best['qs_score'], color='#E63946', s=150, 
                           label='–ù–∞–π–∫—Ä–∞—â–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è', edgecolors='black', linewidth=2)
                ax2.legend(fontsize=11)
                
                # Add colorbar for scatter plot
                cbar = plt.colorbar(scatter, ax=ax2)
                cbar.set_label('QS Score', fontsize=11, fontweight='bold')
                
                plt.tight_layout()
                st.pyplot(fig)
                
                # Summary statistics
                st.subheader("üìã –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–í—Å—å–æ–≥–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π", len(results_df))
                with col2:
                    st.metric("–ù–∞–π–∫—Ä–∞—â–∏–π QS Score", f"{results_df['qs_score'].max():.3f}")
                with col3:
                    st.metric("–°–µ—Ä–µ–¥–Ω—ñ–π QS Score", f"{results_df['qs_score'].mean():.3f}")
                with col4:
                    st.metric("–ß–∞—Å –æ–±—á–∏—Å–ª–µ–Ω–Ω—è", f"{elapsed_time:.1f}—Å")
            else:
                st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≤–∞–ª—ñ–¥–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏.")