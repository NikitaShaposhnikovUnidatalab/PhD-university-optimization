import math
import streamlit as st
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.state import init_state_obj, init_state_value, QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU

st.set_page_config(
    page_title="QS Ranking Configurator", 
    page_icon="‚öôÔ∏è", 
    layout="wide",
    initial_sidebar_state="collapsed"
)


st.title("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
st.caption("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")

print("‚öôÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

init_state_obj("QS_INPUT", QS_INPUT)
init_state_obj("QS_WEIGHTS", QS_WEIGHTS)
init_state_obj("QS_MAX", QS_MAX)
init_state_obj("QS_DELTA", QS_DELTA)
init_state_obj("QS_COST", QS_COST)
init_state_value("MAX_RU", MAX_RU)

st.markdown("---")

new_budget = st.number_input(
    "üí∞ –ë—é–¥–∂–µ—Ç (RU)",
    value=float(st.session_state["MAX_RU"]),
    step=10.0,
    min_value=0.0,
    key="max_ru_input",
)
if new_budget != st.session_state["MAX_RU"]:
    print(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –±—é–¥–∂–µ—Ç –∑ {st.session_state['MAX_RU']} –Ω–∞ {new_budget} RU")
    st.session_state["MAX_RU"] = new_budget

def get_cost_str(x) -> str:
    if isinstance(x, (float, int)) and math.isinf(float(x)):
        return "inf"
    return str(x)

def parse_cost_str(s: str, fallback):
    s = (s or "").strip().lower()
    if s in ("inf", "+inf", "infinity"):
        return float("inf")
    try:
        return float(s)
    except Exception:
        return fallback

tab1, tab2, tab3, tab4 = st.tabs([
    "üìä –ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (2025)",
    "‚öñÔ∏è –í–∞–≥–∏ (QS formula)",
    "üîº –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (Œî)",
    "üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å (RU)"
])

indicator_descriptions = {
    "AR": "Academic Reputation - –†–µ–ø—É—Ç–∞—Ü—ñ—è –≤ –∞–∫–∞–¥–µ–º—ñ—á–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ",
    "ER": "Employer Reputation - –†–µ–ø—É—Ç–∞—Ü—ñ—è —Å–µ—Ä–µ–¥ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤", 
    "FSR": "Faculty Student Ratio - –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤",
    "CPF": "Citations per Faculty - –¶–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–∏–∫–ª–∞–¥–∞—á–∞",
    "IFR": "International Faculty Ratio - –ß–∞—Å—Ç–∫–∞ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤",
    "ISR": "International Student Ratio - –ß–∞—Å—Ç–∫–∞ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤",
    "IRN": "International Research Network - –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–∞ –º–µ—Ä–µ–∂–∞",
    "EO": "Employment Outcomes - –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
    "SUS": "Sustainability - –°—Ç–∞–ª—ñ—Å—Ç—å —Ä–æ–∑–≤–∏—Ç–∫—É"
}

with tab1:
    st.caption("–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É")
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_INPUT.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            new_value = st.number_input(
                f"{k} - {indicator_descriptions.get(k, k)}",
                value=float(st.session_state["QS_INPUT"][k]),
                step=0.1,
                min_value=0.0,
                format="%.2f",
                key=f"input_{k}",
            )
            if round(new_value, 2) != st.session_state["QS_INPUT"][k]:
                print(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –ø–æ–∫–∞–∑–Ω–∏–∫ {k} –∑ {st.session_state['QS_INPUT'][k]} –Ω–∞ {round(new_value, 2)}")
                st.session_state["QS_INPUT"][k] = round(new_value, 2)

with tab2:
    current_sum = sum(float(st.session_state["QS_WEIGHTS"][k]) for k in QS_WEIGHTS.keys())
    st.caption(f"–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ —É —Ñ–æ—Ä–º—É–ª—ñ QS. –°—É–º–∞: {current_sum:.2f} {'‚úÖ' if abs(current_sum - 1.0) < 0.01 else '‚ö†Ô∏è –º–∞—î –±—É—Ç–∏ 1.0'}")
    
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_WEIGHTS.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            new_weight = st.number_input(
                f"{k} - {indicator_descriptions.get(k, k)}",
                value=float(st.session_state["QS_WEIGHTS"][k]),
                step=0.01,
                min_value=0.0,
                max_value=1.0,
                format="%.3f",
                key=f"weight_{k}",
            )
            if round(new_weight, 3) != st.session_state["QS_WEIGHTS"][k]:
                print(f"‚öñÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤–∞–≥—É –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} –∑ {st.session_state['QS_WEIGHTS'][k]} –Ω–∞ {round(new_weight, 3)}")
                st.session_state["QS_WEIGHTS"][k] = round(new_weight, 3)

with tab3:
    st.caption("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –∑–∞ —Ä—ñ–∫")
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_DELTA.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            new_delta = st.number_input(
                f"{k} - {indicator_descriptions.get(k, k)}",
                value=float(st.session_state["QS_DELTA"][k]),
                step=0.1,
                min_value=0.0,
                format="%.2f",
                key=f"delta_{k}",
            )
            if round(new_delta, 2) != st.session_state["QS_DELTA"][k]:
                print(f"üîº –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ delta –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} –∑ {st.session_state['QS_DELTA'][k]} –Ω–∞ {round(new_delta, 2)}")
                st.session_state["QS_DELTA"][k] = round(new_delta, 2)

with tab4:
    st.caption("–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –≤ RU. –í–≤–µ–¥—ñ—Ç—å 'inf' —è–∫—â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏")
    
    col1, col2 = st.columns(2)
    
    for i, k in enumerate(QS_COST.keys()):
        col = col1 if i % 2 == 0 else col2
        
        with col:
            current = st.session_state["QS_COST"][k]
            new_str = st.text_input(
                f"{k} - {indicator_descriptions.get(k, k)}",
                value="inf" if (isinstance(current, float) and math.isinf(current)) else str(int(current)),
                key=f"cost_{k}",
            )
            new_cost = float("inf") if new_str.strip().lower() == "inf" else int(new_str)
            if new_cost != st.session_state["QS_COST"][k]:
                print(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {k} –∑ {st.session_state['QS_COST'][k]} –Ω–∞ {new_cost}")
                st.session_state["QS_COST"][k] = new_cost

st.markdown("---")

col1, col2, col3 = st.columns(3)

budget = st.session_state["MAX_RU"]
weights_sum = sum(float(st.session_state["QS_WEIGHTS"][k]) for k in QS_WEIGHTS.keys())
eligible_count = sum(1 for k in QS_INPUT.keys() if float(st.session_state["QS_DELTA"][k]) > 0 and float(st.session_state["QS_COST"][k]) != float("inf"))

with col1:
    st.metric("üí∞ –ë—é–¥–∂–µ—Ç", f"{budget:,} RU")

with col2:
    st.metric("‚öñÔ∏è –°—É–º–∞ –≤–∞–≥", f"{weights_sum:.3f}")

with col3:
    st.metric("üìä –ü–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", eligible_count)

if abs(weights_sum - 1.0) > 0.01:
    st.warning("‚ö†Ô∏è –°—É–º–∞ –≤–∞–≥ –º–∞—î –±—É—Ç–∏ 1.0")
if budget <= 0:
    st.error("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –±—é–¥–∂–µ—Ç")
if eligible_count < 2:
    st.warning("‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –ø–æ–∫–∞–∑–Ω–∏–∫–∏")

st.markdown("---")

col1, col2 = st.columns(2)

with col1:
    if st.button("üîÑ –°–∫–∏–Ω—É—Ç–∏", use_container_width=True):
        print("üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
        st.session_state["QS_INPUT"] = QS_INPUT.copy()
        st.session_state["QS_WEIGHTS"] = QS_WEIGHTS.copy()
        st.session_state["QS_MAX"] = QS_MAX.copy()
        st.session_state["QS_DELTA"] = QS_DELTA.copy()
        st.session_state["QS_COST"] = QS_COST.copy()
        st.session_state["MAX_RU"] = MAX_RU
        st.rerun()

with col2:
    if st.button("üöÄ –î–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É", use_container_width=True, type="primary"):
        print("üöÄ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")
        st.switch_page("pages/2_–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫.py")

st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>‚öôÔ∏è QS Ranking Configurator | –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –Ω–∞ 2026 —Ä—ñ–∫</p>
</div>
""", unsafe_allow_html=True)