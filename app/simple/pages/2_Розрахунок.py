import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from itertools import combinations
import time
import sys
import os
from datetime import datetime

app_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
if app_root not in sys.path:
    sys.path.insert(0, app_root)

from top_n_optimizer import run_top_n_lp_optimization
from genetic_optimizer import compute_total_ru, save_experiment_to_session
from lp import optimize_qs_pulp

plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

st.set_page_config(
    page_title="QS Ranking Optimizer - Simple", 
    page_icon="üéØ", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

st.title("üßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
st.caption("–ó–Ω–∞–π–¥—ñ—Ç—å –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è QS —Ä–µ–π—Ç–∏–Ω–≥—É –¥–æ 2026")

print("üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (Simple)")
print(f"üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó: {list(st.session_state.keys())}")


required_keys = ["QS_INPUT", "QS_WEIGHTS", "QS_MAX", "QS_DELTA", "QS_COST", "MAX_RU"]

if not all(k in st.session_state for k in required_keys):
    st.error("‚ùå **–î–∞–Ω—ñ —â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ñ!**")
    st.markdown("""
    **–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É:**
    1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É **"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"** (—É –º–µ–Ω—é –∑–ª—ñ–≤–∞)
    2. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, –≤–∞–≥–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è
    3. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    """)
    st.stop()
    
QS_INPUT = st.session_state["QS_INPUT"]
QS_WEIGHTS = st.session_state["QS_WEIGHTS"]
QS_MAX = st.session_state["QS_MAX"]
QS_DELTA = st.session_state["QS_DELTA"]
QS_COST = st.session_state["QS_COST"]
MAX_RU = st.session_state["MAX_RU"]

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("üí∞ –ë—é–¥–∂–µ—Ç", f"{MAX_RU:,} —Ä–µ—Å—É—Ä—Å–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å")
with col2:
    eligible_count = sum(1 for k in QS_INPUT.keys() if float(QS_DELTA.get(k, 0.0)) > 0 and float(QS_COST.get(k, 0.0)) != float("inf"))
    st.metric("üìä –ü–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", eligible_count)
with col3:
    current_qs = sum(float(QS_INPUT[k]) * float(QS_WEIGHTS[k]) for k in QS_INPUT.keys())
    st.metric("‚≠ê –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª", f"{current_qs:.2f}")

# –°–ª–æ–≤–Ω–∏–∫ –∑ –æ–ø–∏—Å–∞–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
indicator_descriptions = {
    "AR": "Academic Reputation - –†–µ–ø—É—Ç–∞—Ü—ñ—è –≤ –∞–∫–∞–¥–µ–º—ñ—á–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ",
    "ER": "Employer Reputation - –†–µ–ø—É—Ç–∞—Ü—ñ—è —Å–µ—Ä–µ–¥ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤", 
    "FSR": "Faculty Student Ratio - –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤",
    "CPF": "Citations per Faculty - –¶–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–∏–∫–ª–∞–¥–∞—á–∞",
    "IFR": "International Faculty Ratio - –ß–∞—Å—Ç–∫–∞ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤",
    "ISR": "International Student Ratio - –ß–∞—Å—Ç–∫–∞ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤",
    "IRN": "International Research Network - –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–∞ –º–µ—Ä–µ–∂–∞",
    "EO": "Employment Outcomes - –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
    "SUS": "Sustainability - –°—Ç–∞–ª—ñ—Å—Ç—å —Ä–æ–∑–≤–∏—Ç–∫—É"
}

st.markdown("---")

# CSS –¥–ª—è –±—ñ–ª—å—à–∏—Ö –≤–∫–ª–∞–¥–æ–∫
st.markdown("""
<style>
    .stTabs [data-baseweb="tab-list"] {
        gap: 4px;
        width: 100%;
    }
    .stTabs [data-baseweb="tab"] {
        height: 45px;
        width: 50%;
        white-space: pre-wrap;
        background-color: #f0f2f6;
        border-radius: 6px 6px 0px 0px;
        gap: 1px;
        padding: 8px 16px;
        font-size: 15px;
        font-weight: 500;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .stTabs [aria-selected="true"] {
        background-color: #ff4b4b;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

tab1, tab2 = st.tabs(["üßÆ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ", "üéØ –í–∏–±—Ä–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏"])

with tab1:
    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
    def get_eligible_indicators():
        eligible = []
        for key in QS_INPUT.keys():
            if (float(QS_DELTA.get(key, 0.0)) > 0.0 and 
                float(QS_COST.get(key, 0.0)) != float("inf")):
                eligible.append(key)
        return eligible
    
    eligible = get_eligible_indicators()
    
    if len(eligible) < 2:
        st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (–º—ñ–Ω—ñ–º—É–º 2)")
        st.info("üí° –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'")
    else:
        with st.expander(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ {len(eligible)} –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", expanded=False):
            for k in eligible:
                desc = indicator_descriptions.get(k, k)
                st.markdown(f"‚Ä¢ **{k}** ‚Äî {desc}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–ø—Ü—ñ–π
        options = list(range(2, min(len(eligible), 10)))
        options.append(len(eligible))
        
        def format_option(num):
            if num == len(eligible):
                return f"–í—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ ({num}) ‚Äî –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤—Å–µ –æ–¥–Ω–æ—á–∞—Å–Ω–æ"
            else:
                return f"{num} –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ ‚Äî –∑–Ω–∞–π—Ç–∏ —Ç–æ–ø-{num} –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π"
        
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–æ–ø-3, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        default_index = options.index(3) if 3 in options else 0
        
        selected_count = st.selectbox(
            "–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
            options=options,
            format_func=format_option,
            index=default_index
        )
        
        if selected_count < len(eligible):
            total_combinations = len(list(combinations(eligible, selected_count)))
            st.caption(f"–ë—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {total_combinations} –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π")
        
        if st.button("üöÄ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏", type="primary", use_container_width=True, key="lp_optimize"):
            if selected_count == len(eligible):
                # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
                print("üßÆ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (Simple)")
                selected = [k for k, d in QS_DELTA.items() if float(d) > 0]
                print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –±—é–¥–∂–µ—Ç={MAX_RU}, –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤={len(selected)}")
                start_time = time.time()
                x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
                    QS_INPUT=QS_INPUT,
                    QS_WEIGHTS=QS_WEIGHTS,
                    QS_MAX=QS_MAX,
                    QS_DELTA=QS_DELTA,
                    QS_COST=QS_COST,
                    MAX_RU=MAX_RU,
                    selected_indicators=selected,
                )

                deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
                ru_used = sum(
                    (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
                    for k in QS_INPUT.keys()
                )

                # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫—É –Ω–∞–∑–≤ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
                df_lp['–ü–æ–∫–∞–∑–Ω–∏–∫'] = df_lp['–ü–æ–∫–∞–∑–Ω–∏–∫'].apply(lambda x: f"{x} - {indicator_descriptions.get(x, x)}")
                
                elapsed_time_lp_full = time.time() - start_time
                print(f"‚úÖ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time_lp_full:.1f}—Å, QS Score: {qs_score_lp:.2f}")
                
                experiment = save_experiment_to_session(
                    algorithm="LP",
                    current_qs=current_qs,
                    qs_score=float(qs_score_lp),
                    ru_used=ru_used,
                    execution_time=elapsed_time_lp_full,
                    solution_details={"solution": x_2026, "algorithm": "LP"},
                    comparison_metrics={
                        "improvement": float(qs_score_lp) - current_qs,
                        "improvement_percent": ((float(qs_score_lp) - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                        "efficiency": (float(qs_score_lp) - current_qs) / ru_used if ru_used > 0 else 0,
                        "budget_utilization": ru_used / MAX_RU if MAX_RU > 0 else 0,
                        "current_qs": current_qs
                    },
                    QS_INPUT=QS_INPUT,
                    solution=[float(x_2026[k]) for k in QS_INPUT.keys()]
                )
                
                st.session_state["last_lp_experiment"] = experiment
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("‚≠ê –ù–æ–≤–∏–π –±–∞–ª", f"{qs_score_lp:.2f}", delta=f"+{qs_score_lp - current_qs:.2f}")
                with col2:
                    improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
                    st.metric("üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è", f"{improvement:.1f}%")
                with col3:
                    st.metric("üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ", f"{ru_used:,.0f} —Ä–µ—Å—É—Ä—Å–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å")
                
                with st.expander("üìä –î–µ—Ç–∞–ª—ñ", expanded=True):
                    st.dataframe(df_lp, use_container_width=True)
            else:
                # –¢–æ–ø-N –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
                print(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ —Ç–æ–ø-N LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é: {selected_count} –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑ {len(eligible)} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö")
                run_top_n_lp_optimization(eligible, selected_count, QS_INPUT, QS_WEIGHTS, QS_MAX, QS_DELTA, QS_COST, MAX_RU, current_qs)
        
        st.markdown("---")
        
        if st.button("ü§ñ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", type="secondary", use_container_width=True, key="ai_analyze"):
            print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            with st.spinner("ü§ñ –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –≥–æ—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó..."):
                try:
                    import sys
                    from pathlib import Path
                    sys.path.insert(0, str(Path(__file__).parent.parent))
                    from llm import generate_qs_insights
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                    if "last_lp_experiment" in st.session_state:
                        experiment = st.session_state["last_lp_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights"] = insights_result
                        st.success("‚úÖ **–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Å—å –Ω–∞—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**")
                    elif "last_lp_topn_experiment" in st.session_state:
                        experiment = st.session_state["last_lp_topn_experiment"]
                        insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                        st.session_state["last_insights"] = insights_result
                        st.success("‚úÖ **–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Å—å –Ω–∞—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**")
                    else:
                        st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É**")
                        st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è'")
                
                except Exception as e:
                    st.error(f"‚ùå **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:** {str(e)}")
                    st.info("üí° –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏")

        if "last_insights" in st.session_state:
            insights = st.session_state["last_insights"]
            
            if insights["status"] == "success":
                st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏")
                st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                    
            elif insights["status"] == "no_api":
                st.error("‚ùå **–†–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
                st.info("üí° –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            elif insights["status"] == "error":
                st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            elif insights["status"] == "empty":
                st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")

with tab2:
    all_keys = list(QS_INPUT.keys())
    default_selected = [k for k in all_keys if float(QS_DELTA.get(k, 0.0)) > 0]
    if "SELECTED_INDICATORS" not in st.session_state:
        st.session_state["SELECTED_INDICATORS"] = default_selected

    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑ –æ–ø–∏—Å–∞–º–∏ –≤ expander
    with st.expander(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ {len(all_keys)} –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤", expanded=False):
        for k in all_keys:
            desc = indicator_descriptions.get(k, k)
            st.markdown(f"‚Ä¢ **{k}** ‚Äî {desc}")
    
    st.markdown("")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
    formatted_options = {k: f"{k} - {indicator_descriptions.get(k, k).split(' - ')[0]}" for k in all_keys}
    
    st.multiselect(
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        options=all_keys,
        format_func=lambda x: formatted_options[x],
        key="SELECTED_INDICATORS"
    )
    
    selected_keys = st.session_state.get("SELECTED_INDICATORS", [])

    if not selected_keys:
        st.warning("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ–∫–∞–∑–Ω–∏–∫")
    else:
        st.caption(f"–û–±—Ä–∞–Ω–æ: {len(selected_keys)} —ñ–∑ {len(all_keys)}")
        
        if st.button("üöÄ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏", type="primary", use_container_width=True):
            print(f"üßÆ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {selected_keys}")
            start_time = time.time()
            x_2026, qs_score_lp, df_lp = optimize_qs_pulp(
                QS_INPUT=QS_INPUT,
                QS_WEIGHTS=QS_WEIGHTS,
                QS_MAX=QS_MAX,
                QS_DELTA=QS_DELTA,
                QS_COST=QS_COST,
                MAX_RU=MAX_RU,
                selected_indicators=selected_keys,
            )
            
            # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫—É –Ω–∞–∑–≤ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
            df_lp['–ü–æ–∫–∞–∑–Ω–∏–∫'] = df_lp['–ü–æ–∫–∞–∑–Ω–∏–∫'].apply(lambda x: f"{x} - {indicator_descriptions.get(x, x)}")
            
            print(f"‚úÖ LP-–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, QS Score: {qs_score_lp:.2f}")

            deltas = {k: float(x_2026[k]) - float(QS_INPUT[k]) for k in QS_INPUT.keys()}
            ru_used = sum(
                (deltas[k] * float(QS_COST[k])) if QS_COST[k] < float("inf") else 0.0
                for k in QS_INPUT.keys()
            )
            
            experiment = save_experiment_to_session(
                algorithm="LP_Selected",
                current_qs=current_qs,
                qs_score=float(qs_score_lp),
                ru_used=ru_used,
                execution_time=time.time() - start_time,
                solution_details={"solution": x_2026, "algorithm": "LP"},
                comparison_metrics={
                    "improvement": float(qs_score_lp) - current_qs,
                    "improvement_percent": ((float(qs_score_lp) - current_qs) / current_qs * 100) if current_qs > 0 else 0,
                    "efficiency": (float(qs_score_lp) - current_qs) / ru_used if ru_used > 0 else 0,
                    "budget_utilization": ru_used / MAX_RU if MAX_RU > 0 else 0,
                    "current_qs": current_qs
                },
                QS_INPUT=QS_INPUT,
                solution=[float(x_2026[k]) for k in QS_INPUT.keys()]
            )

            st.session_state["last_lp_selected_experiment"] = experiment
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‚≠ê –ù–æ–≤–∏–π –±–∞–ª", f"{qs_score_lp:.2f}", delta=f"+{qs_score_lp - current_qs:.2f}")
            with col2:
                improvement = ((qs_score_lp - current_qs) / current_qs * 100) if current_qs > 0 else 0
                st.metric("üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è", f"{improvement:.1f}%")
            with col3:
                st.metric("üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ", f"{ru_used:,.0f} —Ä–µ—Å—É—Ä—Å–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å")

            with st.expander("üìä –î–µ—Ç–∞–ª—ñ", expanded=True):
                st.dataframe(df_lp, use_container_width=True)

    st.markdown("---")
    
    if st.button("ü§ñ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", type="secondary", use_container_width=True):
        print("üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LP –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
        with st.spinner("ü§ñ –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –≥–æ—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó..."):
            try:
                import sys
                from pathlib import Path
                sys.path.insert(0, str(Path(__file__).parent.parent))
                from llm import generate_qs_insights
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                if "last_lp_selected_experiment" in st.session_state:
                    experiment = st.session_state["last_lp_selected_experiment"]
                    insights_result = generate_qs_insights(experiment, current_qs, MAX_RU)
                    st.session_state["last_insights_lp_selected"] = insights_result
                    st.success("‚úÖ **–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Å—å –Ω–∞—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**")
                else:
                    st.error("‚ùå **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É**")
                    st.info("üí° –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤'")
                
            except Exception as e:
                st.error(f"‚ùå **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:** {str(e)}")
                st.info("üí° –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    if "last_insights_lp_selected" in st.session_state:
        insights = st.session_state["last_insights_lp_selected"]
        
        if insights["status"] == "success":
            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏")
            st.markdown(insights.get("text", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è"))
                
        elif insights["status"] == "no_api":
            st.error("‚ùå **–†–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**")
            st.info("üí° –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        elif insights["status"] == "error":
            st.error(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:** {insights.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        elif insights["status"] == "empty":
            st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
